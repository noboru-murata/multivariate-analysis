#+TITLE: 時系列解析
#+SUBTITLE: モデルの推定と予測
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@eb.waseda.ac.jp
#+DATE: 
# Time-stamp: <2023-01-16 17:34:28 mura>
:REVEAL:
#+INCLUDE: "./reveal.js/org/mycourse.org"
#+STARTUP: hidestars content indent
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* COMMENT メモ
- 第3講以降は同じファイルを使うように整理する
- 同じタイトルの項目にはメモを入れる
- 演習の内容が異なるので演習は2つ作る形で対応

* 講義の内容
# 早稲田大学
- 第1日 : 時系列の基本モデル
- *第2日 : モデルの推定と予測*

#+begin_src R :eval no :exports none :tangle yes
  ### 第13講 資料
#+end_src
#+begin_src R :exports none
  setwd("~/Desktop/lectures/mva/course")
#+end_src

* COMMENT 講義概要
# 東京大学
- 第1日 : 時系列の基本モデル
- *第2日 : モデルの推定と予測*

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 第13講 サンプルコード
  ###
#+end_src
#+begin_src R :exports none
  setwd("~/Desktop/lectures/u-tokyo/autumn/course")
#+end_src

* COMMENT 演習 (早稲田大学雛型)
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 早稲田大学
** 問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- について以下を示しなさい．
  - である．
    #+begin_quote
    #+begin_src latex
    #+end_src
    #+end_quote

** 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- いずれも定義にもとづいて計算すればよい
  #+begin_quote
  #+begin_src latex
  #+end_src
  #+end_quote

* COMMENT 演習 (東京大学雛型)
:PROPERTIES:
:reveal_background: #f4fef4
:END:
# 東京大学
** R: 概要
:PROPERTIES:
:reveal_background: #f4fef4
:END:
- ほげほげな方法:
  #+begin_src R :eval no
  #+end_src
  
** データセット
:PROPERTIES:
:reveal_background: #f4fef4
:END:
- 以下のデータセットを使用します
  - ~xxx~
    #+begin_quote
    データの素性
    #+end_quote
    [[https://www.foo.com/]]

** 練習問題
:PROPERTIES:
:reveal_background: #f4fef4
:END:
- 構成しなさい
  - データ
    #+begin_quote
    formulaなどを与える
    #+end_quote

#+begin_src R :eval no :exports none :tangle yes
  ###
  ### 練習問題 
  ###

  ## 
  ## 分析
  ##
#+end_src

** COMMENT 講義資料: 概略
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/bar.r][bar.r]] を確認してみよう


* 時系列解析の復習
** 時系列解析とは
- 時系列データ
  - 時間軸に沿って観測されたデータ
  - 観測の順序に意味がある
  - 異なる時点間での観測データの従属関係が重要
  - *独立性にもとづく解析は行えない* 
    - そのままでは大数の法則や中心極限定理は使えない
- 時系列解析の目的
  - 時系列データの特徴を効果的に記述すること
  - 時系列モデルの推定と評価

** 時系列モデルと定常性
- *確率過程*
  #+begin_quote
  時間を添え字として持つ確率変数列
  #+begin_src latex
    \begin{equation}
      X_{t},\;t=1,\dotsc,T
    \end{equation}
  #+end_src
  #+end_quote
- *弱定常過程* : 以下の性質をもつ確率過程 \(X_t\)
  - \(X_{t}\)の平均は時点\(t\)によらない
  - \(X_{t}\)と\(X_{t+h}\)の共分散は時点\(t\)によらず時差\(h\)のみで定まる
  - 特に\(X_{t}\)の分散は時点\(t\)によらない (\(h=0\)の場合)
- 多くの場合，弱定常性を考えれば十分なので
  単に *定常* ということが多い
- 定常でない確率過程は *非定常* であるという

** ホワイトノイズ
- 定義
  #+begin_quote
  平均\(0\)，分散\(\sigma^{2}\)
  である確率変数の
  確率分布\(P\)からの
  独立かつ同分布な確率変数列
  #+begin_src latex
    \begin{equation}
      X_{t}
      =
      \epsilon_{t},
      \quad
      \epsilon_{t}
      \overset{i.i.d.}{\sim} P
    \end{equation}
  #+end_src
  #+end_quote
  - 記号 \(\mathrm{WN}(0,\sigma^{2})\) で表記
  - *定常* な確率過程

** トレンドのあるホワイトノイズ
- 定義
  #+begin_quote
  \(\mu,\alpha\) を定数として
  #+begin_src latex
    \begin{equation}
      X_{t}=\mu+\alpha t+\epsilon_{t},
      \quad
      \epsilon_{t}
      \sim
      \mathrm{WN}(0,\sigma^2)
    \end{equation}
  #+end_src
  で定義される確率過程
  #+end_quote
  - *非定常* な確率過程
  - [[color:gray][トレンド項(平均値の変化)は現象に応じて一般化される]]

** ランダムウォーク
- 定義
  #+begin_quote
  \(X_0\) を定数もしくは確率変数として
  #+begin_src latex
    \begin{equation}
      X_{t}=X_{t-1}+\epsilon_{t},
      \quad
      \epsilon_{t}
      \sim
      \mathrm{WN}(0,\sigma^2)
    \end{equation}
  #+end_src
  で帰納的に定義される確率過程
  #+end_quote
  - 分散が時間とともに増加・記憶のあるモデル
  - *非定常* な確率過程

** 自己回帰過程
- 定義 (次数\(p\)のARモデル)
  #+begin_quote
  \(a_1,\dotsc,a_p\)を定数とし，
  \(X_1,\dotsc,X_p\)が初期値として与えられたとき，
  #+begin_src latex
    \begin{equation}
      X_{t}=a_1X_{t-1}+\cdots+a_pX_{t-p}+\epsilon_{t},
      \quad
      \epsilon_{t}
      \sim
      \mathrm{WN}(0,\sigma^2)
    \end{equation}
  #+end_src
  で帰納的に定義される確率過程
  #+end_quote
  - ランダムウォークの一般化
  - 無限長の記憶のある(忘却しながら記憶する)モデル
  - *定常にも非定常にもなる*

** 移動平均過程
- 定義 (次数\(q\) のMAモデル)
  #+begin_quote
  \(b_1,\dotsc,b_q\)を定数とし，
  \(X_1,\dotsc,X_q\)が初期値として与えられたとき
  #+begin_src latex
    \begin{equation}
      X_{t}
      =
      b_1\epsilon_{t-1}+\cdots+b_q\epsilon_{t-q}+\epsilon_{t},
      \quad
      \epsilon_{t}
      \sim
      \mathrm{WN}(0,\sigma^2)
    \end{equation}
  #+end_src
  で定義される確率過程
  #+end_quote
  - 有限長の記憶のあるモデル
  - *定常* な確率過程

** 自己回帰移動平均過程
- 定義 (次数\((p,q)\)のARMAモデル)
  #+begin_quote
  \(a_1,\dotsc,a_p,b_1,\dotsc,b_q\) を定数とし，
  \(X_1,\dotsc,X_{\max\{p,q\}}\) が初期値として与えられたとき
  #+begin_src latex
    \begin{align}
      X_{t}
      &=
	a_1X_{t-1}+\cdots+a_pX_{t-p}\\
      &\quad+
	b_1\epsilon_{t-1}+\cdots+b_q\epsilon_{t-q}
	+\epsilon_{t},\\
      &\quad
	\epsilon_{t}
	\sim
	\mathrm{WN}(0,\sigma^2)
    \end{align}
  #+end_src
  で帰納的に定まる確率過程
  #+end_quote
  - AR・MAモデルの一般化・基本的な時系列モデル
  - *定常にも非定常にもなる*

** 自己共分散・自己相関
- 弱定常な確率過程 : \(X_{t},\;t=1,\dotsc,T\)
  - \(X_{t}\) と \(X_{t+h}\) の共分散は時点\(t\)によらずラグ\(h\)のみで定まる
    #+begin_quote
    *自己共分散* (定常過程の性質よりラグは\(h\ge0\)を考えればよい)
    #+begin_src latex
      \begin{equation}
	\gamma(h)
	=
	\mathrm{Cov}(X_{t},X_{t+h})
      \end{equation}
    #+end_src
    #+end_quote
  - \(X_{t}\) と \(X_{t+h}\) の相関も\(t\)によらずラグ\(h\)のみで定まる
    #+begin_quote
    *自己相関*
    #+begin_src latex
      \begin{equation}
	\rho(h)
	=\gamma(h)/\gamma(0)
	=
	\mathrm{Cov}(X_{t},X_{t+h})/\mathrm{Var}(X_{t})
      \end{equation}
    #+end_src
    #+end_quote
- 異なる時点間での観測データの従属関係を要約するための最も基本的な統計量

#+reveal: split
#+begin_src R :file figs/13_ar.png :exports results :results graphics :tangle yes
  ## ARMA過程を生成する関数
  myARMA <- function(a, b, epsilon){
    p <- length(a)
    q <- length(b)
    r <- max(p,q)
    Tmax <- length(epsilon) # 時系列の長さを取得
    x <- double(Tmax)
    x[1:r] <- epsilon[1:r]
    for(t in (r+1):Tmax) {
      x[t] <- a %*% x[t-1:p] + b %*% epsilon[t-1:q] + epsilon[t]
    }
    return(x)
  }
  
  set.seed(1234) # 乱数のシード
  Tmax <- 500 # 時系列の長さ t=1,..,Tmax
  K <- 4 # 表示する時系列の数 (4つを並べて比較する)
  library(RColorBrewer)
  my_col <- brewer.pal(K,"Dark2")
  df.ar <- ts(replicate(K, myARMA(a=c(0.67, 0.26), b=c(0),
				  epsilon=rnorm(Tmax))))
  df.ma <- ts(replicate(K, myARMA(a=c(0), b=c(0.44, 0.08),
				  epsilon=rnorm(Tmax))))
  df.arma <- ts(replicate(K, myARMA(a=c(0.8, -0.64), b=c(-0.5),
				    epsilon=rnorm(Tmax))))
  
  plot(x=df.ar, plot.type="single",
       ylab="value", col=my_col,
       main=expression(X[t] == 0.67*X[t-1] + 0.26*X[t-2] + epsilon[t]))
#+end_src
   
#+CAPTION: 同じモデルに従うAR過程の例
#+NAME: fig:13_ar
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_ar.png]]

#+reveal: split
#+begin_src R :file figs/13_aracf.png :exports results :results graphics :tangle yes
  ### AR(2)モデルの自己相関
  orgpar <- par(mfrow=c(2,2)) # グラフを2x2(行方向の順)に並べる
  for(i in 1:K) {
    acf(df.ar[,i], col=my_col[i], main=paste("AR series",i))
  }
  par(orgpar)
#+end_src

#+CAPTION: AR過程の自己相関
#+NAME: fig:13_aracf
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_aracf.png]]
   
#+reveal: split
#+begin_src R :file figs/13_ma.png :exports results :results graphics :tangle yes
  plot(x=df.ma, plot.type="single",
       ylab="value", col=my_col,
       main=expression(X[t] == 0.44*epsilon[t-1] + 0.08*epsilon[t-2] + epsilon[t]))
#+end_src

#+CAPTION: 同じモデルに従うMA過程の例
#+NAME: fig:13_ma
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_ma.png]]

#+reveal: split
#+begin_src R :file figs/13_maacf.png :exports results :results graphics :tangle yes
  ### MA(2)モデルの自己相関
  orgpar <- par(mfrow=c(2,2))
  for(i in 1:K) {
      acf(df.ma[,i], col=my_col[i], main=paste("MA series",i))
  }
  par(orgpar)
#+end_src
   
#+CAPTION: MA過程の自己相関
#+NAME: fig:13_maacf
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_maacf.png]]

#+reveal: split
#+begin_src R :file figs/13_arma.png :exports results :results graphics :tangle yes
  plot(x=df.arma, plot.type="single",
       ylab="value", col=my_col,
       main=expression(X[t] == 0.8*X[t-1] - 0.64*X[t-2] - 0.5*epsilon[t-1] + epsilon[t]))
#+end_src

#+CAPTION: 同じモデルに従うARMA過程の例
#+NAME: fig:13_arma
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_arma.png]]

#+reveal: split
#+begin_src R :file figs/13_armaacf.png :exports results :results graphics :tangle yes
  ### ARMA(2,1)モデルの自己相関
  orgpar <- par(mfrow=c(2,2))
  for(i in 1:K) {
      acf(df.arma[,i], col=my_col[i], main=paste("ARMA series",i))
  }
  par(orgpar)
#+end_src

#+CAPTION: ARMA過程の自己相関
#+NAME: fig:13_armaacf
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_armaacf.png]]
   
   
* COMMENT 実習(復習)
:PROPERTIES:
:reveal_background: #f4fef4
:END:
# 東京大学
** R : 関数 ~acf()~
- 自己相関・自己共分散の計算
  #+begin_src R :eval no
    acf(x, lag.max = NULL,
	type = c("correlation", "covariance", "partial"),
	plot = TRUE, na.action = na.fail, demean = TRUE, ...)
    ## x: 時系列データ
    ## lag.max: 計算するラグの最大値
    ## type: 標準は相関, 共分散と偏相関を選ぶこともできる
    ## plot: 描画するか否か
    ## na.action: 欠損値の処理，標準は欠損を含むと計算しない
    ## demean: 共分散の計算において平均を引くか否か
  #+end_src
  - 詳細は ~?acf~ を参照

** 練習問題
:PROPERTIES:
:reveal_background: #f4fef4
:END:
- 以下の問に答えなさい
  - 同じAR過程のモデルから生成した時系列の自己相関を比較しなさい
    (前の練習問題を利用すればよい)
  - MA過程についても同様な比較を行いなさい
  - ARMA過程についても同様な比較を行いなさい

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 自己相関
  ### 
  
  ## ARMA過程を生成する関数
  myARMA <- function(a, b, epsilon){
      p <- length(a)
      q <- length(b)
      r <- max(p,q)
      Tmax <- length(epsilon) # 時系列の長さを取得
      x <- double(Tmax)
      x[1:r] <- epsilon[1:r]
      for(t in (r+1):Tmax) {
          x[t] <- a %*% x[t-1:p] + b %*% epsilon[t-1:q] + epsilon[t]
      }
      return(x)
  }
  
  Tmax <- 200 # 時系列の長さ t=1,..,Tmax
  K <- 4 # 表示する時系列の数 (4つを並べて比較する)
  library(RColorBrewer)
  my_col <- brewer.pal(K,"Dark2") 
  df.ar <- ts(replicate(K, myARMA(a=c(0.67, 0.26), b=c(0),
                                  epsilon=rnorm(Tmax))))
  df.ma <- ts(replicate(K, myARMA(a=c(0), b=c(0.44, 0.08),
                                  epsilon=rnorm(Tmax))))
  df.arma <- ts(replicate(K, myARMA(a=c(0.8, -0.64), b=c(-0.5),
                                    epsilon=rnorm(Tmax))))
  
  ### AR(2)モデルの自己相関
  orgpar <- par(mfrow=c(2,2)) # グラフを2x2(行方向の順)に並べる
  for(i in 1:K) {
      acf(df.ar[,i], col=my_col[i], main=paste("AR series",i))
  }
  par(orgpar) # もとのparの内容に戻す
  
  ### MA(2)モデルの自己相関
  orgpar <- par(mfrow=c(2,2))
  for(i in 1:K) {
      acf(df.ma[,i], col=my_col[i], main=paste("MA series",i))
  }
  par(orgpar) # もとのparの内容に戻す
  
  ### ARMA(2,1)モデルの自己相関
  orgpar <- par(mfrow=c(2,2))
  for(i in 1:K) {
      acf(df.arma[,i], col=my_col[i], main=paste("ARMA series",i))
  }
  par(orgpar) # もとのparの内容に戻す
#+end_src


* ARモデルの推定
** 自己共分散・自己相関
- 平均\(0\)の弱定常な確率過程 : \(X_{t},\;t=1,\dotsc,T\)
  - \(X_{t}\) と \(X_{t+h}\) の共分散は時点\(t\)によらずラグ\(h\)のみで定まる
    #+begin_quote
    *自己共分散* 
    #+begin_src latex
      \begin{equation}
	\gamma(h)
	=
	\mathrm{Cov}(X_{t},X_{t+h})
	=
	\mathbb{E}[X_{t}X_{t+h}]
      \end{equation}
    #+end_src
    #+end_quote
  - \(X_{t}\)と\(X_{t+h}\)の相関も\(t\)によらずラグ\(h\)のみで定まる
    #+begin_quote
    *自己相関係数*
    #+begin_src latex
      \begin{equation}
	\rho(h)
	=\mathrm{Cov}(X_{t},X_{t+h})/\mathrm{Var}(X_{t})
	=\gamma(h)/\gamma(0)
      \end{equation}
    #+end_src
    #+end_quote

** 自己共分散とARモデル
- AR(p)モデル : 
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      X_{t}
      =
      a_{1}X_{t-1}+a_{2}X_{t-2}+\dotsb+a_{p}X_{t-p}+\epsilon_{t}
    \end{equation}
  #+end_src
  #+end_quote
- 係数と自己共分散の関係
  # ラグ\(h>0\)の自己共分散
  #+begin_quote
  #+begin_src latex
    \begin{align}
      \gamma(h)
      &=
	\mathbb{E}[X_{t}X_{t+h}]\\
      &=
	\mathbb{E}[X_{t}(a_{1}X_{t+h-1}+\dotsb+a_{p}X_{t+h-p}+\epsilon_{t+h})]\\
      &=
	a_{1}\mathbb{E}[X_{t}X_{t+h-1}]
	+\dotsb
	+a_{p}\mathbb{E}[X_{t}X_{t+h-p}]
	+\mathbb{E}[X_{t}\epsilon_{t+h}]\\
      &=
	a_{1}\gamma(h-1)
	+\dotsb+
	a_{p}\gamma(h-p)
    \end{align}
  #+end_src
  #+end_quote

** Yule-Walker方程式
- \(1\le h\le p\) を考えると以下の関係が成り立つ
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      \begin{pmatrix}
	\gamma(1)\\
	\gamma(2)\\
	\vdots\\
	\gamma(p)
      \end{pmatrix}
      =
      \begin{pmatrix}
	\gamma(0)&\gamma(-1)&\dots&\gamma(-p+1)\\
	\gamma(1)&\gamma(0)&\dots&\gamma(-p+2)\\
	\vdots&\vdots&\ddots&\vdots\\
	\gamma(p-1)&\gamma(p-2)&\dots&\gamma(0)
      \end{pmatrix}
      \begin{pmatrix}
	a_{1}\\
	a_{2}\\
	\vdots\\
	a_{p}
      \end{pmatrix}
    \end{equation}
  #+end_src
  #+end_quote
  - 行列は Toeplitz 行列と呼ばれる
  - 行列が正則ならばARの係数は一意に求まる

** 偏自己相関
- AR(p)モデル
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      X_{t}
      =
      a_{1}X_{t-1}+a_{2}X_{t-2}+\dotsb+a_{p}X_{t-p}+\epsilon_{t}
    \end{equation}
  #+end_src
  #+end_quote
  - ラグ\(p\)の *偏自己相関係数*
    #+begin_quote
    AR(p)モデルを仮定したときの\(a_{p}\)の推定値
    (Yule-Walker方程式の解)
    #+end_quote
  - ラグ\(p\)の特別な *自己相関係数* 
    #+begin_quote
    \(a_{1}=a_{2}=\dotsb=a_{p-1}=0\)のときの\(a_{p}\) (*特殊なモデルにおける解釈*)
    #+begin_src latex
      \begin{equation}
	\mathbb{E}[X_{t}X_{t+p}]=a_{p}\mathbb{E}[X_{t}X_{t}]
	\;\Rightarrow\; \gamma(p)=a_{p}\gamma(0)
	\;\Rightarrow\; \rho(p)=a_{p}
      \end{equation}
    #+end_src
    #+end_quote

#+reveal: split
#+begin_src R :file figs/13_arpacf.png :exports results :results graphics :tangle yes
  ### AR(2)モデルの偏自己相関
  orgpar <- par(mfrow=c(2,2)) # グラフを2x2(行方向の順)に並べる
  for(i in 1:K) {
      pacf(df.ar[,i], col=my_col[i], main=paste("AR series",i))
  }
  par(orgpar)
#+end_src

#+CAPTION: AR過程の偏自己相関
#+NAME: fig:13_arpacf
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_arpacf.png]]

#+reveal: split
#+begin_src R :file figs/13_mapacf.png :exports results :results graphics :tangle yes
  ### MA(2)モデルの偏自己相関
  orgpar <- par(mfrow=c(2,2))
  for(i in 1:K) {
      pacf(df.ma[,i], col=my_col[i], main=paste("MA series",i))
  }
  par(orgpar)
#+end_src

#+CAPTION: MA過程の偏自己相関
#+NAME: fig:13_mapacf
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_mapacf.png]]

#+reveal: split
#+begin_src R :file figs/13_armapacf.png :exports results :results graphics :tangle yes
  ### ARMA(2,1)モデルの偏自己相関
  orgpar <- par(mfrow=c(2,2))
  for(i in 1:K) {
      pacf(df.arma[,i], col=my_col[i], main=paste("ARMA series",i))
  }
  par(orgpar)
#+end_src

#+CAPTION: ARMA過程の偏自己相関
#+NAME: fig:13_armapacf
#+ATTR_HTML: height 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/13_armapacf.png]]
   
** モデルの推定に関する補足
- ARMAモデルの推定方法は主に以下の3つ
  - Yule-Walker方程式
  - 最小二乗
    - 予測誤差の平方和の最小化
    - 回帰と同じだが，従属系列のため多重共線性に注意
  - 最尤推定
    - WNの分布を仮定して同時尤度関数を設定
    - 非線形最適化を行う
- 一般にモデルは近似なので，どの推定が良いかは問題による


* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 早稲田大学
** 問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 以下で定義されるMA(1)について問に答えなさい
  #+begin_src latex
    \begin{equation}
      X_{t}
      =
      b_{1}\epsilon_{t-1}+\epsilon_{t},
      \quad
      \epsilon_{t}
      \sim
      \mathrm{WN}(0,\sigma^2)
    \end{equation}
  #+end_src
  - ラグ2までの自己共分散係数を求めなさい
  - 自己相関係数とパラメタ\(b_{1}\)が満すべき方程式を求めなさい

** 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 平均0であることに注意して定義通り計算する
  #+begin_quote
  #+begin_src latex
    \begin{align}
      \gamma(0)
      &=
	\mathbb{E}[X_{t}X_{t}]
	=
	\mathbb{E}[(b_{1}\epsilon_{t-1}+\epsilon_{t})^{2}]\\
      &=
	b_{1}^{2}\mathbb{E}[\epsilon_{t-1}^{2}]
	+2b_{1}\mathbb{E}[\epsilon_{t-1}\epsilon_{t}]
	+\mathbb{E}[\epsilon_{t}^{2}]\\
      &=
	(b_{1}^{2}+1)\sigma^{2}\\
      \gamma(1)
      &=
	\mathbb{E}[X_{t}X_{t+1}]
	=
	\mathbb{E}[(b_{1}\epsilon_{t-1}+\epsilon_{t})(b_{1}\epsilon_{t}+\epsilon_{t+1})]\\
      &=
	b_{1}^{2}\mathbb{E}[\epsilon_{t-1}\epsilon_{t}]
	+b_{1}\mathbb{E}[\epsilon_{t-1}\epsilon_{t+1}]
	+b_{1}\mathbb{E}[\epsilon_{t}\epsilon_{t}]
	+\mathbb{E}[\epsilon_{t}\epsilon_{t+1}]\\
      &=
	b_{1}\sigma^{2}\\
      \gamma(2)
      &=
	\mathbb{E}[X_{t}X_{t+2}]
	=
	\mathbb{E}[(b_{1}\epsilon_{t-1}+\epsilon_{t})(b_{1}\epsilon_{t+1}+\epsilon_{t+2})]\\
      &=
	b_{1}^{2}\mathbb{E}[\epsilon_{t-1}\epsilon_{t+1}]
	+b_{1}\mathbb{E}[\epsilon_{t-1}\epsilon_{t+2}]
	+b_{1}\mathbb{E}[\epsilon_{t}\epsilon_{t+1}]
	+\mathbb{E}[\epsilon_{t}\epsilon_{t+2}]\\
      &=
	0
    \end{align}
  #+end_src
  #+end_quote

#+reveal: split
- ラグ3以降も自己共分散は0となることに注意する
  #+begin_quote
  #+begin_src latex
    \begin{align}
      \gamma(0)
      &=
	(b_{1}^{2}+1)\sigma^{2}\\
      \gamma(1)
      &=
	b_{1}\sigma^{2}
    \end{align}
  #+end_src
  \(\sigma^{2}\)を消去して以下が得られる
  #+begin_src latex
    \begin{equation}
      \gamma(1)/\gamma(0)
      =\frac{b_{1}}{b_{1}^{2}+1}
      =\rho(1)
    \end{equation}
    \begin{equation}
      \rho(1)b_{1}^{2}-b_{1}+\rho(1)=0
    \end{equation}
  #+end_src
  \(\rho(1)\)の値によっては解が求められない場合もある
  #+end_quote
     
     
* COMMENT 実習
:PROPERTIES:
:reveal_background: #f4fef4
:END:
# 東京大学
** R : ARモデルの推定 ~ar()~ 
- 定常ARモデルのあてはめ
  #+begin_src R :eval no
    ar(x, aic = TRUE, order.max = NULL, method = "yule-walker")
    ## x: 時系列データ (ts クラスが望ましい)
    ## aic: AICを計算するか否か
    ## order.max: 計算すべき最大次数 (既定値は時系列の長さから規則的に計算)
    ## method: 計算方法，他に "burg", "ols", "mle" が指定できる
    est <- ar(x) # 時系列xの係数を推定する
    acf(resid(est)) # 残差(epsilonの推定値に相当)がホワイトノイズか確認する
  #+end_src
  - AICを用いて次数を自動決定することができる

** COMMENT 演習: ARモデルの推定
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/14-arest.r][14-arest.r]] を確認してみよう

** R : ARIMAモデルの推定 ~arima()~
- 階差系列への定常ARMAモデルのあてはめ: ~stats::arima()~
  #+begin_src R :eval no
    arima(x, order = c(0L, 0L, 0L),
	  seasonal = list(order = c(0L, 0L, 0L), period = NA))
    ## x: 時系列データ (ts クラスが望ましい)
    ## order: 次数 c(AR,階差,MA)
    ## seasonal: 次数と期間 list(order=(AR,階差,MA),period=期間)
  #+end_src
  - 関数 ~arima()~ には次数の決定機能はない
  - 試行錯誤による次数の決定が必要

** R : ARIMAモデルの推定 ~forecast::auto.arima()~
- パッケージ ~forecast~ の利用
  #+begin_src R :eval no
    ## 右下ペインの package タブから forecast をインストール
    ## install.packages("forecast") 
    library(forecast)
    auto.arima(x, d=1, D=1)
    ## x: 時系列データ
    ## d: 定常化のための階差回数
    ## D: 季節成分(周期成分)の定常化のための階差回数
  #+end_src
  - 次数を自動決定することができる

** COMMENT 演習: ARIMAモデルの推定
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/14-armaest.r][14-armaest.r]] を確認してみよう

** 練習問題
:PROPERTIES:
:reveal_background: #f4fef4
:END:
- 先週作成した関数 ~myARMA()~ を利用して以下の問に答えなさい
  - AR過程を生成し，関数 ~ar()~ を用いて係数を推定しなさい
  - ARMA過程を生成し，関数 ~arima()~ および
    関数 ~auto.arima()~ を用いて係数を推定しなさい
  - 推定結果の妥当性を残差の自己相関係数を調べることによって確認しなさい

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 ARMAモデルの推定
  ### 
  
  ## ARMA過程を生成する関数
  myARMA <- function(a, b, epsilon){
      p <- length(a)
      q <- length(b)
      r <- max(p,q)
      Tmax <- length(epsilon) # 時系列の長さを取得
      x <- double(Tmax)
      x[1:r] <- epsilon[1:r]
      for(t in (r+1):Tmax) {
          x[t] <- a %*% x[t-1:p] + b %*% epsilon[t-1:q] + epsilon[t]
      }
      return(x)
  }
  
  ## AR(2)過程の生成 (以下は前回の例を利用，自由に変更せよ)
  x.ar <- ts(myARMA(a=c(0.67, 0.26),
                    b=0,
                    epsilon=rnorm(1000))) # 時系列の長さも自由に変更せよ
  ## 関数 ar による自動推定
  est.ar <- ar(x.ar) 
  print(est.ar) # ある程度長い系列であれば良い推定が得られる
  
  ## ARMA(2,1)過程の生成
  x.arma <- ts(myARMA(a=c(0.8, -0.64),
                      b=c(-0.5),
                      epsilon=rnorm(1000))) 
  ## 関数 arima による手動推定
  est.arma0 <- arima(x.arma, order=c(2, 0, 1)) # 正しいモデル
  est.arma1 <- arima(x.arma, order=c(3, 0, 1))
  est.arma2 <- arima(x.arma, order=c(2, 0, 2))
  print(est.arma0)
  print(est.arma1)
  print(est.arma2)
  ## 尤度(likelihood)は大きい方が観測データへのあてはまりは良い
  ## AICは小さい方が良い予測が良いことが期待される
  
  ## 関数 auto.arima による自動推定
  ## パッケージの読み込み
  library(forecast) # 既に読み込んでいれば不要 
  est.arma <- auto.arima(x.arma, d=0, D=0)
  print(est.arma)
  ## 必ずしも正しいモデルが推定される訳ではないことに注意
  ## 特に短い時系列では推定が難しい場合が多い
  ## 生成する系列の長さを変えて実験してみよう
  
  ## 自己相関係数による評価
  plot(x.arma) # 元の時系列
  acf(x.arma)  # 元の時系列の自己相関
  plot(resid(est.arma)) # 推定されたモデルの残差
  acf(resid(est.arma))  # 推定されたモデルの残差の自己相関
  ## 残差は無相関になっていることが確認できる
#+end_src

** 非定常過程の変換
- 定常過程とみなせるように変換して分析
  - 階差の利用
    #+begin_quote
    #+begin_src latex
      \begin{equation}
	X_{t}=X_{t-1}+\epsilon_{t}
	\quad\Rightarrow\quad
	Y_{t}=X_{t}-X_{t-1}=\epsilon_{t}
      \end{equation}
    #+end_src
    #+end_quote
    - ランダムウォーク : 階差をとるとホワイトノイズ(定常過程)
    - *ARIMA過程* : 階差をとるとARMA過程になる確率過程 
  - 対数変換の利用
    #+begin_quote
    #+begin_src latex
      \begin{equation}
	X_{t}=(1+\epsilon_{t})X_{t-1}
	\quad\Rightarrow\quad
	Y_{t}=\log(X_{t})-\log(X_{t-1})
	=\log(1+\epsilon_{t})
	\simeq\epsilon_{t}
      \end{equation}
    #+end_src
    #+end_quote
    - 対数変換と階差で微小な比率の変動を抽出

** R : 関数 ~zoo()~
- 時系列クラス ~zoo~ を作成する関数
  #+begin_src R :eval no
    library(zoo) # forecast を利用すると自動的に読み込まれる
    zoo(x = NULL, order.by = index(x), frequency = NULL, ...)
    ## x: ベクトル，行列
    ## order.by: 成分の目盛
    ## frequency: 季節成分の周期
    x.zoo <- zoo(x, # データに日付の情報を付加する例 (Dateクラスで指定)
		 order.by = seq(from=as.Date("2021-01-01"), 
				to=as.Date("2021-12-31"), by=1))
    start(x.zoo) # index(x.zoo)[1] 最初の日付
    end(x.zoo) # index(x.zoo)[length(x.zoo)] 最後の日付
  #+end_src
  - その他の詳細は ~?zoo~ を参照

** R : 関数 ~window()~
- 時系列から部分系列を切り出す関数
  #+begin_src R :eval no
    window(x, start = NULL, end = NULL)
    ## x: ベクトル，行列
    ## start: 開始時点
    ## end: 終了時点
    window(x, # データに日付の情報が入っている場合 (zooの例)
	   start="2021-12-01", # Dateクラスの標準の書き方
	   end="2021/12/31") # Dateクラスはこちらでも解釈可能
  #+end_src
  - その他の詳細は ~?stats::window~ を参照

** 練習問題
:PROPERTIES:
:reveal_background: #f4fef4
:END:
- 東京の気候データを用いて以下の問に答えなさい
  #+begin_src R :eval no
    tw_data <- read.csv("data/tokyo_weather.csv")
  #+end_src
  - 気温のデータを ~zoo~ クラスに変換しなさい
  - 気温のデータおよびその階差の性質を検討しなさい
  - 関数 ~auto.arima()~ を用いてモデルを作成しなさい

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 東京の気温データの時系列モデル
  ### 
  
  ## パッケージの読み込み (既に読み込んでいれば不要 )
  library(zoo) 
  library(forecast)
  tw_data <- read.csv("data/tokyo_weather.csv")
  tw_zoo <- with(tw_data,
                 zoo(temp,
                     order.by = as.Date(paste(year,month,day,sep="-"))))
  
  ## データの視覚化を行う
  plot(tw_zoo, col="red",
       xlab="month", ylab="degree", main="Temperature in Tokyo")
  plot(window(tw_zoo, # 一部を切り出して視覚化する
              start=as.Date("2021-06-01"),
              end=as.Date("2021-07-31")),
       col="red",
       xlab="date", ylab="degree", main="Temperature (June-July)")
  acf(tw_zoo)       # 減衰が遅いので差分をとった方が良さそう
  plot(diff(tw_zoo)) # 階差系列の視覚化
  acf(diff(tw_zoo))  # 階差系列の自己相関
  
  ## 階差系列にARMAモデルをあてはめる (d=1)
  tw_fit <- auto.arima(tw_zoo, d=1, D=0)
  summary(tw_fit) # 推定されたモデルの仕様を表示
  acf(resid(tw_fit)) # そこそこあてはまりは良さそう
#+end_src


* モデルによる予測
** モデルによる予測
- 推定したモデルを用いて\(n\)期先を予測
  - ARモデル : 観測時点までの観測値を用いて回帰
  - MAモデル : 観測時点までのホワイトノイズで回帰
  - ARMAモデル : 上記の複合
- いずれも \(n\)が大きいと不確定性が増大
- 階差による変換は累積(階差の逆変換)により推定

#+reveal: split

#+name: fig:13_pred_wn
#+begin_src R :file figs/13_pred_wn.png :exports results :results graphics
  library(forecast)
  library(tidyverse)
  library(ggfortify)
  ## ARMA過程を生成する関数
  myARMA <- function(a, b, epsilon){
    p <- length(a)
    q <- length(b)
    r <- max(p,q)
    Tmax <- length(epsilon) # 時系列の長さを取得
    x <- double(Tmax)
    x[1:r] <- epsilon[1:r]
    for(t in (r+1):Tmax) {
      x[t] <- a %*% x[t-1:p] + b %*% epsilon[t-1:q] + epsilon[t]
    }
    return(x)
  }
  ## ホワイトノイズの予測
  autoplot(forecast(myARMA(a=c(0),b=c(0),rnorm(180)),h=20),col=2)
#+end_src
#+caption: ホワイトノイズの予測
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_pred_wn.png]]

#+reveal: split

#+name: fig:13_pred_rw
#+begin_src R :file figs/13_pred_rw.png :exports results :results graphics
  ## ランダムウォークの予測
  autoplot(forecast(myARMA(a=c(1),b=c(0),rnorm(180)),h=20),col=2)
#+end_src
#+caption: ランダムウォークの予測
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_pred_rw.png]]

#+reveal: split

#+name: fig:13_pred_arma
#+begin_src R :file figs/13_pred_arma.png :exports results :results graphics
  ## ARMA 過程の予測
  autoplot(forecast(myARMA(a=c(0.8, -0.64),b=c(-0.5),rnorm(180)),h=20),col=2)
#+end_src
#+caption: ARMA 過程の予測
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_pred_arma.png]]

** 分解による予測
- トレンド成分+季節成分+ランダム成分への分解
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      X_{t}=T_{t}+S_{t}+R_{t}
    \end{equation}
  #+end_src
  #+end_quote
  - トレンド成分 : 時間の関数やランダムウォークなどを想定
  - 季節成分 : 周期的な関数を想定
  - ランダム成分 : ARMAモデルなどを想定
- 分解の考え方
  - ランダム成分 : 適切な幅の移動平均が0
  - 季節成分 : 1周期の平均が0


* 解析事例
** COVID-19 の感染者数の分析
- 厚生労働省の COVID-19 のデータ
  - 陽性者数 (新規・累積)
  - 重症者数 (推移・性別・年齢別)
  - 死者数 (推移・性別・年齢別・累積)
  - 入院治療等を要する者等推移
  - 集団感染等発生状況
- 以下で用いるデータ
  - 日毎の全国・各都道府県の新規陽性者数 (感染者数)
    [[https://covid19.mhlw.go.jp/public/opendata/newly_confirmed_cases_daily.csv]]

** 感染者数の推移
#+name: fig:13_patients
#+begin_src R :file figs/13_patients.png :exports results :results graphics
  ### 基本的な時系列モデルによる予測
  ### 厚生労働省のCOVID-19の感染者数データを用いた例

  ## パッケージの読み込み
  library(forecast)
  library(tidyverse)
  library(scales) # 年月日表示
  library(plotly) 
  library(zoo)    # 時系列表示
  library(ggfortify)

  ## データの取得と整理 
  patients <-
      read.csv("https://covid19.mhlw.go.jp/public/opendata/newly_confirmed_cases_daily.csv") %>%
      dplyr::rename(date=1, patients=2) %>% 
      dplyr::mutate(date=as.Date(date))
  ## 時系列データ(zooクラス)への変更
  patients <- with(patients,
                     zoo(x=patients, order.by=date))

  ## データの視覚化
  p <-
      ggplot(data = fortify(patients, melt = TRUE),
             mapping = aes(x = Index,
                           y = Value)) +
      scale_x_date(labels = date_format("%y-%m-%d"), # 年月日表示
                   breaks = date_breaks("1 month")) + # 週毎
      theme(axis.text.x = element_text(angle = 90, 
                                       vjust = 0.5, hjust=1)) +
      labs(title = "COVID-19 patients in Japan",
           x = "date",
           y = "number of patients")
  ## 棒グラフ
  print(p + geom_col(fill="skyblue")) # グラフ出力
#+end_src
#+caption: 全国の感染者数
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_patients.png]]

** 第3波における感染者数の推移
#+name: fig:13_3wave_patients
#+begin_src R :file figs/13_3wave_patients.png :exports results :results graphics
  ## 第3波 (2020/9/15-2021/1/31)
  p <-
    ggplot(data = fortify(window(patients,
                                 start="2020-09-15",
                                 end="2021-01-31"),
                          melt = TRUE),
           mapping = aes(x = Index,
                         y = Value)) +
    scale_x_date(labels = date_format("%y-%m-%d"), # 年月日表示
                 breaks = date_breaks("1 week")) + # 週毎
    theme(axis.text.x = element_text(angle = 90, 
                                     vjust = 0.5, hjust=1)) +
    labs(title = "COVID-19 patients in Japan",
         x = "date",
         y = "number of patients")
  ## 棒グラフ
  print(p + geom_col(fill="skyblue")) # グラフ出力
#+end_src
#+caption: 第3波の感染者数
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_patients.png]]

** 基礎分析 (分析対象 : 2020/9/15-11/30)
#+name: fig:13_3wave
#+begin_src R :file figs/13_3wave.png :exports results :results graphics
  ## 9月以降の第3波を対象とする
  train <- window(patients,
                  start="2020-09-15",
                  end="2020-11-30")
  test <- window(patients,
                 start="2020-12-01")

  ## 階差系列の性質
  autoplot(diff(train)) +
    labs(x = "date",
         y = "D(patients)")
#+end_src
#+caption: 時系列 (階差)
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave.png]]

#+reveal: split

#+name: fig:13_3wave_acf
#+begin_src R :file figs/13_3wave_acf.png :exports results :results graphics
  autoplot(acf(diff(train), plot = FALSE), # 自己相関
           conf.int.fill = "royalblue",
           conf.int.alpha =0.2,
           conf.int.value = 0.7,
           conf.int.type = "ma") +
    labs(title = "D(patients)") +
    ylim(c(-0.5,1.0))
#+end_src
#+name: fig:13_3wave_pacf
#+begin_src R :file figs/13_3wave_pacf.png :exports results :results graphics
  autoplot(pacf(diff(train), plot = FALSE), # 偏自己相関
           conf.int.fill = "royalblue",
           conf.int.alpha =0.2,
           conf.int.value = 0.7) +
    labs(title = "D(patients)",
         y = "PACF") +
    ylim(c(-0.5,1.0))
#+end_src
#+begin_leftcol
#+caption: 自己相関 (階差)
#+attr_html: width 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_acf.png]]
#+end_leftcol
#+begin_rightcol
#+caption: 偏自己相関 (階差)
#+attr_html: width 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_pacf.png]]
#+end_rightcol

#+reveal: split

#+name: fig:13_3wave_log
#+begin_src R :file figs/13_3wave_log.png :exports results :results graphics
  ## 対数変換を確認する
  ltrain <- log(train)
  autoplot(diff(ltrain)) +
      labs(x = "date",
           y = "D(log(patients))")
#+end_src
#+caption: 時系列 (対数変換+階差)
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_log.png]]

#+reveal: split

#+name: fig:13_3wave_log_acf
#+begin_src R :file figs/13_3wave_log_acf.png :exports results :results graphics
  autoplot(acf(diff(ltrain), plot = FALSE), # 自己相関
           conf.int.fill = "royalblue",
           conf.int.alpha =0.2,
           conf.int.value = 0.7,
           conf.int.type = "ma") +
    labs(title = "D(log(patients))") +
    ylim(c(-0.5,1.0))
#+end_src
#+name: fig:13_3wave_log_pacf
#+begin_src R :file figs/13_3wave_log_pacf.png :exports results :results graphics
  autoplot(pacf(diff(ltrain), plot = FALSE), # 偏自己相関
           conf.int.fill = "royalblue",
           conf.int.alpha =0.2,
           conf.int.value = 0.7) +
    labs(title = "D(log(patients))",
         y = "PACF") +
    ylim(c(-0.5,1.0))
#+end_src
#+begin_leftcol
#+caption: 自己相関 (対数変換+階差)
#+attr_html: width 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_log_acf.png]]
#+end_leftcol
#+begin_rightcol
#+caption: 偏自己相関 (対数変換+階差)
#+attr_html: width 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_log_pacf.png]]
#+end_rightcol

#+reveal: split

#+name: fig:13_3wave_log7
#+begin_src R :file figs/13_3wave_log7.png :exports results :results graphics
  ## 7日の周期性を確認する
  autoplot(diff(diff(ltrain), lag=7)) +
      labs(x = "date",
           y = "D7*D(log(patients))")
#+end_src
#+caption: 時系列 (対数変換+階差+7日階差)
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_log7.png]]

#+reveal: split

#+name: fig:13_3wave_log7_acf
#+begin_src R :file figs/13_3wave_log7_acf.png :exports results :results graphics
  autoplot(acf(diff(diff(ltrain), lag=7), plot = FALSE), # 自己相関
           conf.int.fill = "royalblue",
           conf.int.alpha =0.2,
           conf.int.value = 0.7,
           conf.int.type = "ma") +
    labs(title = "D7*D(log(patients))") +
    ylim(c(-0.5,1.0))
#+end_src
#+name: fig:13_3wave_log7_pacf
#+begin_src R :file figs/13_3wave_log7_pacf.png :exports results :results graphics
  autoplot(pacf(diff(diff(ltrain), lag=7), plot = FALSE), # 偏自己相関
           conf.int.fill = "royalblue",
           conf.int.alpha =0.2,
           conf.int.value = 0.7) +
    labs(title = "D7*D(log(patients))",
         y = "PACF") +
    ylim(c(-0.5,1.0))
#+end_src
#+begin_leftcol
#+caption: 自己相関 (対数変換+階差+7日階差)
#+attr_html: width 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_log7_acf.png]]
#+end_leftcol
#+begin_rightcol
#+caption: 偏自己相関 (対数変換+階差+7日階差)
#+attr_html: width 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_log7_pacf.png]]
#+end_rightcol

** ARIMA モデルによる推定
- 推定された ARIMA モデル
#+begin_src R :exports results :results output
  ## drift付きのARIMAモデルの次数を自動推定
  est.arima <- forecast::auto.arima(ltrain)
  ## 推定されたモデルを表示
  print(est.arima)
  ## SARIMAモデルを当て嵌める場合は周期を指定する．
  ## frequency(ltrain) <- 7 # 7日周期の成分を仮定
  ## (est.arima7 <- auto.arima(ltrain))
  ## このデータではモデルの推定はうまくいかない
#+end_src

#+reveal: split

#+name: fig:13_3wave_arima_est
#+begin_src R :file figs/13_3wave_arima_est.png :exports results :results graphics
  ## モデルによる当て嵌めの視覚化
  p <- 
    ggplot(data = fortify(est.arima) %>%
             dplyr::mutate(Index=as.Date(Index)),
           mapping = aes(x = Index,
                         y = Data)) +
    geom_line(colour = "skyblue") +
    geom_line(mapping = aes(y = Fitted),
              colour = "orange") +
    scale_x_date(labels = date_format("%y-%m-%d"), 
                 breaks = date_breaks("1 week")) + 
    theme(axis.text.x = element_text(angle = 90,
                                     vjust = 0.5, hjust=1)) +
    labs(title = "Fitted by ARIMA model",
         x = "date",
         y = "log(patients)")
  print(p)
#+end_src
#+caption: あてはめ値
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_arima_est.png]]

#+reveal: split

#+name: fig:13_3wave_arima_diag
#+begin_src R :file figs/13_3wave_arima_diag.png :exports results :results graphics
  ## 診断プロット
  tsdiag(est.arima)
  ## 残差に相関が残っているので，優れたモデルという訳ではない
#+end_src
#+caption: 診断プロット
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_arima_diag.png]]

#+reveal: split

#+name: fig:13_3wave_arima_pred
#+begin_src R :file figs/13_3wave_arima_pred.png :exports results :results graphics
  ## 12月以降(最大60日)を予測してみる
  p <- 
    ggplot(data = fortify(forecast(est.arima,
                                   h=min(length(test),60))) %>%
             dplyr::mutate(Index=as.Date(Index)) %>%
             left_join(fortify(test), by = "Index"), 
           mapping = aes(x = Index,
                         y = exp(Data)),
           na.rm = TRUE) +
    geom_line(colour = "skyblue",
              na.rm = TRUE) +
    geom_line(mapping = aes(y = test),
              colour = "red",
              na.rm = TRUE) +
    geom_line(mapping = aes(y = exp(`Point Forecast`)),
              colour = "royalblue",
              na.rm = TRUE) +
    geom_ribbon(mapping = aes(ymin = exp(`Lo 80`),
                              ymax = exp(`Hi 80`)),
                fill = "royalblue", alpha = 0.3,
                na.rm = TRUE) +
    ## geom_ribbon(mapping = aes(ymin = exp(`Lo 95`),
    ##   			ymax = exp(`Hi 95`)),
    ##   	  fill = "royalblue", alpha = 0.1,
    ##   	  na.rm = TRUE) +
    scale_x_date(labels = date_format("%y-%m-%d"), 
                 breaks = date_breaks("1 week")) + 
    theme(axis.text.x = element_text(angle = 90,
                                     vjust = 0.5, hjust=1)) +
    labs(title = "Prediction by ARIMA model",
         x = "date",
         y = "number of patients")
  print(p)
#+end_src
#+caption: 予測値 (60日分)
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_arima_pred.png]]

** COMMENT 分解モデルによる推定
- 局所線形構造モデルによる分解
#+name: fig:13_3wave_sts_decomp
#+begin_src R :file figs/13_3wave_sts_decomp.png :exports results :results graphics
  ## StructTS による方法
  est.sts <- StructTS(ltrain)
  ## 推定されたモデルを表示
  ## print(est.sts)
  ## StructTSによる時系列の分解結果
  autoplot(est.sts)
#+end_src
#+caption: 時系列の分解結果
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_sts_decomp.png]]

#+reveal: split

#+name: fig:13_3wave_sts_est
#+begin_src R :file figs/13_3wave_sts_est.png :exports results :results graphics
  ## モデルによる当て嵌めの視覚化
  p <- 
      ggplot(data = fortify(forecast(est.sts)) %>%
                 dplyr::mutate(Index=as.Date(Index)),
             mapping = aes(x = Index,
                           y = Data),
             na.rm = TRUE) +
      geom_line(colour = "skyblue",
                na.rm = TRUE) +
      geom_line(mapping = aes(y = Fitted),
                colour = "orange",
                na.rm = TRUE) +
      scale_x_date(labels = date_format("%y-%m-%d"), 
                   breaks = date_breaks("1 week")) + 
      theme(axis.text.x = element_text(angle = 90,
                                       vjust = 0.5, hjust=1)) +
      labs(title = "Fitted by Local Linear Structure model",
           x = "date",
           y = "log(patients)")
  print(p)
#+end_src
#+caption: あてはめ値
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_sts_est.png]]

#+reveal: split

#+name: fig:13_3wave_sts_diag
#+begin_src R :file figs/13_3wave_sts_diag.png :exports results :results graphics
  ## 診断プロット
  tsdiag(est.sts)
  ## こちらも残差に相関が残っているので，優れたモデルという訳ではない
#+end_src
#+caption: 診断プロット
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_sts_diag.png]]

#+reveal: split

#+name: fig:13_3wave_sts_pred
#+begin_src R :file figs/13_3wave_sts_pred.png :exports results :results graphics
  ## 12月以降(最大60日)を予測してみる
  p <- 
    ggplot(data = fortify(forecast(est.sts,
                                   h=min(length(test),60))) %>%
             dplyr::mutate(Index=as.Date(Index)) %>%
             left_join(fortify(test), by = "Index"), 
           mapping = aes(x = Index,
                         y = exp(Data)),
           na.rm = TRUE) +
    geom_line(colour = "skyblue",
              na.rm = TRUE) +
    geom_line(mapping = aes(y = test),
              colour = "red",
              na.rm = TRUE) +
    geom_line(mapping = aes(y = exp(`Point Forecast`)),
              colour = "royalblue",
              na.rm = TRUE) +
    geom_ribbon(mapping = aes(ymin = exp(`Lo 80`),
                              ymax = exp(`Hi 80`)),
                fill = "royalblue", alpha = 0.3,
                na.rm = TRUE) +
    ## geom_ribbon(mapping = aes(ymin = exp(`Lo 95`),
    ##   			ymax = exp(`Hi 95`)),
    ##   	  fill = "royalblue", alpha = 0.1,
    ##   	  na.rm = TRUE) +
    scale_x_date(labels = date_format("%y-%m-%d"), 
                 breaks = date_breaks("1 week")) + 
    theme(axis.text.x = element_text(angle = 90,
                                     vjust = 0.5, hjust=1)) +
    labs(title = "Prediction by Local Linear Structure model",
         x = "date",
         y = "number of patients")
  print(p)
#+end_src
#+caption: 予測値 (60日分)
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_3wave_sts_pred.png]]

** 第8波における感染者数の推移
#+name: fig:13_8wave_patients
#+begin_src R :file figs/13_8wave_patients.png :exports results :results graphics
  ## 第8波 (2022/10/10-現在)
  p <-
    ggplot(data = fortify(window(patients,
                                 start="2022-10-10"),
                          melt = TRUE),
           mapping = aes(x = Index,
                         y = Value)) +
    scale_x_date(labels = date_format("%y-%m-%d"), # 年月日表示
                 breaks = date_breaks("1 week")) + # 週毎
    theme(axis.text.x = element_text(angle = 90, 
                                     vjust = 0.5, hjust=1)) +
    labs(title = "COVID-19 patients in Japan",
         x = "date",
         y = "number of patients")
  ## 棒グラフ
  print(p + geom_col(fill="skyblue")) # グラフ出力
#+end_src
#+caption: 第8波の感染者数
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_8wave_patients.png]]

** ARIMA モデルによる推定 
- ARIMA モデルのあてはめ
  - (対象区間 : 2022/11/01-11/30)
#+begin_src R :exports results :results output
  ## 9月以降の第3波を対象とする
  train <- window(patients,
                  start="2022-11-01",
                  end="2022-11-30")
#                  start="2022-10-10",
#                  end="2022-11-10")
  test <- window(patients,
                 start="2022-12-01")
#                 start="2022-11-11")
  ltrain <- log(train)

  ## 第3波で推定された次数のARIMAモデルを利用
  est.arima <- forecast::Arima(log(train),c(2,1,2),include.drift=TRUE)
  ## 推定されたモデルを表示
  print(est.arima)
  ## 自動選択だと良いモデルが選択されない
  ## est.arima <- forecast::auto.arima(ltrain)
  ## SARIMAモデルを当て嵌める場合は周期を指定する．
  ## frequency(ltrain) <- 7 # 7日周期の成分を仮定
  ##  (est.arima7 <- auto.arima(ltrain))
  ## このデータではモデルの推定はうまくいかない
#+end_src

#+reveal: split

#+name: fig:13_8wave_arima_diag
#+begin_src R :file figs/13_8wave_arima_diag.png :exports results :results graphics
  ## 診断プロット
  tsdiag(est.arima)
  ## 残差に相関が残っているので，優れたモデルという訳ではない
#+end_src
#+caption: 診断プロット
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_8wave_arima_diag.png]]

#+reveal: split

#+name: fig:13_8wave_arima_est
#+begin_src R :file figs/13_8wave_arima_est.png :exports results :results graphics
  ## モデルによる当て嵌めの視覚化
  p <- 
    ggplot(data = fortify(est.arima) %>%
             dplyr::mutate(Index=as.Date(Index)),
           mapping = aes(x = Index,
                         y = Data)) +
    geom_line(colour = "skyblue") +
    geom_line(mapping = aes(y = Fitted),
              colour = "orange") +
    scale_x_date(labels = date_format("%y-%m-%d"), 
                 breaks = date_breaks("1 week")) + 
    theme(axis.text.x = element_text(angle = 90,
                                     vjust = 0.5, hjust=1)) +
    labs(title = "Fitted by ARIMA model",
         x = "date",
         y = "log(patients)")
  print(p)
#+end_src
#+caption: あてはめ値
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_8wave_arima_est.png]]

#+reveal: split

#+name: fig:13_8wave_arima_pred
#+begin_src R :file figs/13_8wave_arima_pred.png :exports results :results graphics
  ## 12月以降(最大60日)を予測してみる
  p <- 
    ggplot(data = fortify(forecast(est.arima,
                                   h=min(length(test),60))) %>%
             dplyr::mutate(Index=as.Date(Index)) %>%
             left_join(fortify(test), by = "Index"), 
           mapping = aes(x = Index,
                         y = exp(Data)),
           na.rm = TRUE) +
    geom_line(colour = "skyblue",
              na.rm = TRUE) +
    geom_line(mapping = aes(y = test),
              colour = "red",
              na.rm = TRUE) +
    geom_line(mapping = aes(y = exp(`Point Forecast`)),
              colour = "royalblue",
              na.rm = TRUE) +
    geom_ribbon(mapping = aes(ymin = exp(`Lo 80`),
                              ymax = exp(`Hi 80`)),
                fill = "royalblue", alpha = 0.3,
                na.rm = TRUE) +
    ## geom_ribbon(mapping = aes(ymin = exp(`Lo 95`),
    ##   			ymax = exp(`Hi 95`)),
    ##   	  fill = "royalblue", alpha = 0.1,
    ##   	  na.rm = TRUE) +
    scale_x_date(labels = date_format("%y-%m-%d"), 
                 breaks = date_breaks("1 week")) + 
    theme(axis.text.x = element_text(angle = 90,
                                     vjust = 0.5, hjust=1)) +
    labs(title = "Prediction by ARIMA model",
         x = "date",
         y = "number of patients")
  print(p)
#+end_src
#+caption: 予測値 (2023/01/16まで)
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_8wave_arima_pred.png]]

** COMMENT 分解モデルによる推定
- 局所線形構造モデルのあてはめ (対象区間 : 2022/10/10-11/10)
#+begin_src R :exports results :results output
  ## StructTS による方法
  est.sts <- StructTS(ltrain)
  ## 推定されたモデルを表示
  print(est.sts)
#+end_src

#+reveal: split

#+name: fig:13_8wave_sts_diag
#+begin_src R :file figs/13_8wave_sts_diag.png :exports results :results graphics
  ## 診断プロット
  tsdiag(est.sts)
  ## こちらも残差に相関が残っているので，優れたモデルという訳ではない
#+end_src
#+caption: 診断プロット
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_8wave_sts_diag.png]]

#+reveal: split

#+name: fig:13_8wave_sts_decomp
#+begin_src R :file figs/13_8wave_sts_decomp.png :exports results :results graphics
  ## StructTSによる時系列の分解結果
  autoplot(est.sts)
#+end_src
#+caption: 時系列の分解結果
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_8wave_sts_decomp.png]]

#+reveal: split

#+name: fig:13_8wave_sts_est
#+begin_src R :file figs/13_8wave_sts_est.png :exports results :results graphics
  ## モデルによる当て嵌めの視覚化
  p <- 
      ggplot(data = fortify(forecast(est.sts)) %>%
                 dplyr::mutate(Index=as.Date(Index)),
             mapping = aes(x = Index,
                           y = Data),
             na.rm = TRUE) +
      geom_line(colour = "skyblue",
                na.rm = TRUE) +
      geom_line(mapping = aes(y = Fitted),
                colour = "orange",
                na.rm = TRUE) +
      scale_x_date(labels = date_format("%y-%m-%d"), 
                   breaks = date_breaks("1 week")) + 
      theme(axis.text.x = element_text(angle = 90,
                                       vjust = 0.5, hjust=1)) +
      labs(title = "Fitted by Local Linear Structure model",
           x = "date",
           y = "log(patients)")
  print(p)
#+end_src
#+caption: あてはめ値
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_8wave_sts_est.png]]

#+reveal: split

#+name: fig:13_8wave_sts_pred
#+begin_src R :file figs/13_8wave_sts_pred.png :exports results :results graphics
  ## 12月以降(最大60日)を予測してみる
  p <- 
    ggplot(data = fortify(forecast(est.sts,
                                   h=min(length(test),60))) %>%
             dplyr::mutate(Index=as.Date(Index)) %>%
             left_join(fortify(test), by = "Index"), 
           mapping = aes(x = Index,
                         y = exp(Data)),
           na.rm = TRUE) +
    geom_line(colour = "skyblue",
              na.rm = TRUE) +
    geom_line(mapping = aes(y = test),
              colour = "red",
              na.rm = TRUE) +
    geom_line(mapping = aes(y = exp(`Point Forecast`)),
              colour = "royalblue",
              na.rm = TRUE) +
    geom_ribbon(mapping = aes(ymin = exp(`Lo 80`),
                              ymax = exp(`Hi 80`)),
                fill = "royalblue", alpha = 0.3,
                na.rm = TRUE) +
    ## geom_ribbon(mapping = aes(ymin = exp(`Lo 95`),
    ##   			ymax = exp(`Hi 95`)),
    ##   	  fill = "royalblue", alpha = 0.1,
    ##   	  na.rm = TRUE) +
    scale_x_date(labels = date_format("%y-%m-%d"), 
                 breaks = date_breaks("1 week")) + 
    theme(axis.text.x = element_text(angle = 90,
                                     vjust = 0.5, hjust=1)) +
    labs(title = "Prediction by Local Linear Structure model",
         x = "date",
         y = "number of patients")
  print(p)
#+end_src
#+caption: 予測値 (60日分)
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/13_8wave_sts_pred.png]]
  
** まとめ
- 感染者数の推移は非定常なデータ
- 構造が時不変と考えられる区間を捉えれば
  - 時系列の適切な変換 (指数的な増大のため対数変換)
  - 基本的なARMAモデル (階差系列にARMAモデルを適用)
  の組み合わせである程度の分析は可能


* COMMENT 実習
:PROPERTIES:
:reveal_background: #f4fef4
:END:
# 東京大学
** R : 時系列の予測 ~predict()~
- 推定されたモデルによる予測
  #+begin_src R :eval no
    predict(object, newdata, n.ahead = 1, se.fit = TRUE, ...)
    ## object: ar また arima による推定結果
    ## newdata: 予測対象のデータ (arの場合のみ)
    ## n.ahead: n期先の予測
    ## se.fit: 標準誤差を付加するか否か
    x.fit <- arima(x, order=c(0,1,1),
		   seasona=list(order=c(0,1,1), period=12))
    x.prd <- predict(x.fit, n.ahead=10)
    x.prd$pred # 予測値 (標準誤差は $se)
  #+end_src
  - 詳細は ~?predict.ar, ?precidt.Arima~ を参照

** R : 時系列の予測 ~forecast()~
- パッケージ ~forecast~ の利用
  #+begin_src R :eval no
    forecast(object, h)
    ## object: ar また arima による推定結果
    ## h: h期先の予測 (指定しないと2周期または10期先を予測)
    x.fit <- auto.arima(x, d=1, D=1)
    x.prd <- forecast(x.fit, h=10)
    x.prd$mean # 予測値 (信頼区間は $upper/$lower)
    plot(x.prd) # 全体を視覚化
  #+end_src
  - 詳細は ~?forecast~ を参照

** R : 時系列の分解 ~StructTS()~
- トレンドの構造を仮定して分解する関数
  #+begin_src R :eval no
    StructTS(x, type = "level", fixed = NULL, ...)
    ## x: 時系列データ
    ## type: "level" 平均の変動をランダムウォークでモデル化
    ##       "trend" 平均と傾きをランダムウォークでモデル化
    ##       "BSM" 季節成分を含むモデル (frequencyが必要)
    ## fixed: ホワイトノイズの分散の指定
    x.sts <- StructTS(x, type = "trend", fixed = c(0.1,NA,NA))
    ## 平均のホワイトノイズの分散を0.1，傾きとランダム成分の分散は推定
    forecast(x.sts, h=10) # predictを使うことも可
  #+end_src
  - 詳細は ~?StructTS~ を参照
  - 分解を行う関数は ~decompose, stl~ などもある

** COMMENT 演習: 時系列の予測
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/14-predict.r][14-predict.r]] を確認してみよう

** COMMENT 演習: 実データの予測
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/14-airpass.r][14-airpass.r]] を確認してみよう

** 練習問題
:PROPERTIES:
:reveal_background: #f4fef4
:END:
- 東京の気候データを用いて以下の問に答えなさい
  - 6月までのデータを用いて適切なモデルを推定しなさい
  - 7月のデータの推定を行いなさい

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 東京の気温の予測
  ### 
  
  ## パッケージの読み込み (既に読み込んでいれば不要)
  library(zoo) 
  library(forecast) 
  
  ## データの読み込み (既に行っていれば不要)
  tw_data <- read.csv("data/tokyo_weather.csv")
  tw_zoo <- with(tw_data,
                 zoo(temp,
                     order.by = as.Date(paste(year,month,day,sep="-"))))
  ## データの整理
  tw_train <- window(tw_zoo, # 6月までのデータ (訓練データ)
                     end="2021-06-30")  
  tw_test  <- window(tw_zoo, # 7月のデータ (試験データ)
                     start="2021-07-01", end="2021-07-31") 
  
  ## auto.arima による推定
  (tw_auto <- auto.arima(tw_train, d=1, D=0)) 
  (tw_fcst <- forecast(tw_auto, h=length(tw_test)))
  
  ## 視覚化
  plot(tw_fcst) # X軸が無粋 (1970-01-01からの日数)
  
  ## X軸の書き直し
  plot(tw_fcst, xaxt="n",
       xlim=c(as.Date("2021-06-01"), as.Date("2021-07-31")))
  axis(side=1, # x軸を指定
       at=index(tw_zoo), # 文字を書く座標軸上の位置
       labels=index(tw_zoo), # ラベル
       las=2, # 垂直に表示
       cex.axis=0.7) # 文字の大きさを調整
  lines(tw_test, col="red") # 真値を重ね描き
  
  ## 別の書き方
  plot(window(tw_zoo, start="2021-06-01", end="2021-07-31"),
       col="darkgray",
       xlab="date", ylab="temperature")
  with(tw_fcst, lines(mean, col="red", lwd=3))    # 予測値
  with(tw_fcst, lines(upper[,1], col="orange", lwd=3)) # +80%信頼区間
  with(tw_fcst, lines(upper[,2], col="orchid", lwd=3)) # +95%信頼区間
  with(tw_fcst, lines(lower[,1], col="orange", lwd=3)) # -80%信頼区間
  with(tw_fcst, lines(lower[,2], col="orchid", lwd=3)) # -95%信頼区間
  
  ## StructTS による推定
  (tw_sts <- StructTS(tw_train, type="trend", fixed=c(0.1,NA,NA)))
  (tw_fsts <- forecast(tw_sts, h=length(tw_test)))
  
  ## 分解結果の表示 
  plot(merge(tw_train, fitted(tw_sts)), col="blue")
  
  ## 視覚化
  plot(tw_fsts, xaxt="n",
       xlim=c(as.Date("2021-06-01"), as.Date("2021-07-31")))
  axis(side=1, # x軸を指定
       at=index(tw_zoo), # 文字を書く座標軸上の位置
       labels=index(tw_zoo), # ラベル
       las=2, # 垂直に表示
       cex.axis=0.7) # 文字の大きさを調整
  lines(tw_test, col="red") # 真値を重ね描き
#+end_src
     
** 練習問題
:PROPERTIES:
:reveal_background: #f4fef4
:END:
- 以下の問に答えなさい
  - ~AirPassengers~ データを用いて分析・予測を行いなさい
  - COVID-19のデータを用いて分析・予測を行いなさい
    [[https://covid19.mhlw.go.jp/public/opendata/newly_confirmed_cases_daily.csv]]

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 AirPassengersデータの分析
  ### 

  ## AirPassengersデータの読み込み
  library(forecast)
  data(AirPassengers)
  tsp(AirPassengers) # データの時間に関する情報を表示 (月ごとのデータ)
  plot(AirPassengers, col="blue") # データの表示
  plot(log(AirPassengers), col="blue") # 対数変換データの表示
  ## 対数変換により分散変動が安定化していることがわかる
  
  ## 以下では対数変換したデータを扱う
  ap_train <- window(log(AirPassengers), end=c(1957,12))  # 訓練データ
  ap_test  <- window(log(AirPassengers), start=c(1958,1)) # 試験データ
  
  ## まずトレンド(明らかな上昇傾向)について考察
  ## 階差を取ることにより定常化できるか検討
  plot(diff(ap_train), col="blue") 
  acf(diff(ap_train))  # 自己相関
  pacf(diff(ap_train)) # 偏自己相関
  ## lag=1(1年)に強い(偏)自己相関(季節成分)がある
  
  ## 季節成分について考察
  ## 12ヶ月で階差を取って同様に検討
  plot(diff(diff(ap_train), lag=12), col="blue")
  acf(diff(diff(ap_train), lag=12), lag.max=24)  # 自己相関
  pacf(diff(diff(ap_train), lag=12), lag.max=24) # 偏自己相関
  
  ## lag=1/12,3/12,1 に若干偏自己相関が残っている
  ## lag=2 (2年) まで見ると自己相関も偏自己相関も誤差内
  
  ## SARIMAモデルの作成
  ##  階差系列については ARMA(1-3)，
  ##  季節成分 については ARMA(1-2)
  ## あたりを考える必要がありそう
  
  ## 関数arimaを用いる場合
  ## 季節成分によるARMA項の指定はseasonalオプションを用いる
  ## 例えば seasonal=list(order=c(0,1,2),period=12) で
  ## 差分(1階)= e(t) + b(12)*e(t-12) + b(24)*e(t-24) のMA(2)モデルを指定
  ## orderとseasonal/orderでそれぞれ1ヶ月階差と12ヶ月階差を取ることに注意
  ## seasonalのperiodは既定値では時系列のfrequencyを用いるので通常は指定不要
  ## 例
  (ap_arima <- arima(ap_train,
                     order=c(0,1,2), # 階差1のMA(2)
                     seasonal=list(order=c(0,1,1)))) # 12ヶ月階差1のMA(1)
  tsdiag(ap_arima) # 時系列モデルの診断図
  
  ## 自動的にモデル選択を行う
  (ap_auto <- auto.arima(ap_train, d=1, D=1))
  tsdiag(ap_auto) # 時系列モデルの診断図
  ## AIC最小のモデルは以下となる
  ## arima(x, order=c(0,1,1), seasonal=list(order=c(0,1,1)))
  
  ## 予測値と標準偏差の計算
  plot(forecast(ap_auto, h=length(ap_test))) # 対数変換していることに注意
  lines(ap_test, col="red") # 真の値
  
  ## 関数 predict を利用して元のデータ空間に戻す
  ap_pred <- predict(ap_auto, n.ahead=length(ap_test))
  
  ## 対数データにおける予測+/-標準偏差の表示
  library(tseries)
  seqplot.ts(x=ap_train, y=ap_test,
             colx="gray", coly="red", 
             ylab="passengers/month (log)")
  with(ap_pred,
       lines(pred, col="blue", lwd=2))
  with(ap_pred, lines(pred+1.96*se, col="darkblue")) # 95%の信頼区間
  with(ap_pred, lines(pred-1.96*se, col="darkblue")) # 1.28なら80%
  
  ## もとのデータの空間に戻してみる (指数変換 <-> 対数変換)
  seqplot.ts(x=exp(ap_train), y=exp(ap_test),
             colx="gray", coly="red",
             ylab="passengers/month")
  with(ap_pred,
       lines(exp(pred), col="blue", lwd=2))
  with(ap_pred, lines(exp(pred+1.96*se), col="darkblue")) 
  with(ap_pred, lines(exp(pred-1.96*se), col="darkblue"))
  
  ## 時系列の分解
  ## basic structure model による分析
  ## トレンド(level+slope) + 季節(12ヶ月周期) + ランダム
  ## 自動的にモデル選択を行う
  (ap_sts <- StructTS(ap_train, type="BSM"))
  plot(cbind(obs=ap_train, fit=fitted(ap_sts))) # 分解結果の視覚化
  tsdiag(ap_sts) # 時系列モデルの診断図
  ## slopeの変動が季節成分の影響を受けて大きいので，推定に制限を付ける
  (ap_sts <- StructTS(ap_train, type="BSM",
                      fixed=c(NA,0,NA,NA))) # slopeの推定を滑らかに
  plot(cbind(obs=ap_train, fit=fitted(ap_sts))) 
  tsdiag(ap_sts) 
  ## fixed=c(0,0,NA,NA) とすればlevelの推定も滑らかになる
  
  ## 予測値と標準偏差の計算
  plot(forecast(ap_sts, h=length(ap_test))) # 対数変換していることに注意
  lines(ap_test, col="red") # 真の値
  
  ## 関数 predict を利用して元のデータ空間に戻す
  ap_psts <- predict(ap_sts, n.ahead=length(ap_test))
  seqplot.ts(x=exp(ap_train), y=exp(ap_test),
             colx="gray", coly="red",
             ylab="passengers/month")
  with(ap_psts,
       lines(exp(pred), col="blue", lwd=2))
  with(ap_psts, lines(exp(pred+1.96*se), col="darkblue")) 
  with(ap_psts, lines(exp(pred-1.96*se), col="darkblue"))
#+end_src

#+begin_src R :eval no :exports none :tangle yes
  ### 
  ### 練習問題 厚生労働省のCOVID-19の感染者数データ
  ### 

  ## データの取得と整理 
  cp_data <- subset(
      x = read.csv("https://covid19.mhlw.go.jp/public/opendata/newly_confirmed_cases_daily.csv"),
      select = 1:2)
  names(cp_data) <- c("date","patients")
  cp_data$date <- as.Date(cp_data$date)
  head(cp_data)
  
  ## 時系列データ(zooクラス)への変更
  cp_zoo <- with(cp_data,zoo(x=patients, order.by=date))
  plot(cp_zoo, col="blue")
  
  ## 対象を限定する
  cp_sub <- window(cp_zoo, start="2022-06-01")
  
  plot(diff(cp_sub), col="blue") 
  acf(diff(cp_sub))  # 自己相関
  pacf(diff(cp_sub)) # 偏自己相関
  ## 7日周期の影響があることがわかる
  plot(diff(diff(cp_sub), lag=7), col="blue")
  acf(diff(diff(cp_sub), lag=7), lag.max=21)
  pacf(diff(diff(cp_sub), lag=7), lag.max=21)
  
  ## 対数変換を確認する
  cp_log <- log(cp_sub)
  plot(diff(cp_log), col="blue") 
  acf(diff(cp_log))  # 自己相関
  pacf(diff(cp_log)) # 偏自己相関
  plot(diff(diff(cp_log), lag=7), col="blue")
  acf(diff(diff(cp_log), lag=7), lag.max=21)
  pacf(diff(diff(cp_log), lag=7), lag.max=21)
  
  ## cp_log にもとづいて予測を行う
  
  ## auto.arima による方法
  ## 周期を指定して分析してみる
  frequency(cp_log) <- 7 # 7日周期の成分を仮定
  (cp_auto <- auto.arima(cp_log))
  ## モデルの推定としてはうまくいかない，おそらく周期性が曖昧なため
  frequency(cp_log) <- 1 # 周期なしとして推定
  (cp_auto <- auto.arima(cp_log))
  ## ARIMA(3,1,4)としてモデル化
  tsdiag(cp_auto)
  ## 残差に相関が残っているので，優れたモデルという訳ではない
  plot(cp_log, col="blue", ylab="log(patients)")
  lines(fitted(cp_auto), col="orange")
  ## 50日先まで予測してみる
  cp_date <- seq(from=start(cp_zoo), to=as.Date("2023-03-31"), by=1)
  plot(forecast(cp_auto, h=50), xaxt="n")
  axis(side=1, 
       at=cp_date, labels=cp_date, las=2, 
       cex.axis=0.7) 
  ## 対数変換
  cp_fauto <- forecast(cp_auto, h=50)
  seqplot.ts(x=as.ts(cp_sub), y=exp(with(cp_fauto, mean)),
             colx="gray", coly="red",
             ylab="patients")
  with(cp_fauto, lines(exp(lower[,1]), col="darkblue")) # 80%信頼区間
  with(cp_fauto, lines(exp(upper[,1]), col="darkblue")) 
  
  ## StructTS による方法
  (cp_sts <- StructTS(cp_log))
  plot(fitted(cp_sts))
  plot(forecast(cp_sts, h=50), xaxt="n")
  lines(cp_log)
  axis(side=1, 
       at=cp_date, labels=cp_date, las=2, 
       cex.axis=0.7)
  ## 対数変換
  ## StructTSの返値は少し整理が必要なので注意 (別の書き方の例)
  cp_fsts <- forecast(cp_sts, h=50)
  plot(c(exp(cp_log), # zooクラスを連結する
         zoo(exp(with(cp_fsts, upper[,1])), 
             order.by=as.Date(with(cp_fsts, index(mean))))),
       col="white", ylab="patients", xlab="", xaxt="n")
  axis(side=1, 
       at=cp_date, labels=cp_date, las=2, 
       cex.axis=0.7)
  lines(exp(cp_log), col="gray")
  with(cp_fsts, lines(exp(mean), col="blue"))
  with(cp_fsts, lines(ts(exp(lower[,1]),
                         start=with(cp_fsts, start(mean))),
                      col="darkblue")) # 80%信頼区間
  with(cp_fsts, lines(ts(exp(upper[,1]),
                         start=with(cp_fsts, start(mean))),
                      col="darkblue")) # 80%信頼区間
#+end_src


* COMMENT 次回
  - 自習 (レポート作成)
  - 質問などある人は Zoom にて受付 (9:30-10:00)
   
* Footnotes
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:

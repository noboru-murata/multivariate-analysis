#+TITLE: 回帰分析 
#+SUBTITLE: 回帰モデルの考え方と推定
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@gmail.com
#+DATE: 
#+STARTUP: hidestars content indent
# Time-stamp: <2024-10-26 22:03:15 mura>
:REVEAL:
#+SETUPFILE: "./reveal.js/local/mycourse.org"
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* COMMENT メモ
- 第3講以降は同じファイルを使うように整理する
- 同じタイトルの項目にはメモを入れる
- 演習の内容が異なるので演習は2つ作る形で対応
- 雛型などは削除

* 講義の内容
:PROPERTIES:
:ID:       B6502FA9-1588-4CAF-880C-8AF139B18374
:END:
# 早稲田大学
- *第1回 : 回帰モデルの考え方と推定*
- 第2回 : モデルの評価
- 第3回 : モデルによる予測と発展的なモデル

#+begin_src R :exports none :tangle no
  setwd("~/Desktop/lectures/mva/course")
#+end_src
#+begin_src R :exports none
  ### 第3講 資料
  library(tidyverse)
  library(broom)
  #' 日本語表示・色の設定 (ggplot)
  theme_set(theme_gray(base_size = 16))
  if(Sys.info()[["sysname"]] == "Darwin") { # MacOSか確認
    if(length(grep("BIZUDPGothic", systemfonts::system_fonts()[["name"]]))>0) 
      theme_update(text = element_text(family = "BIZUDGothic-Regular"))
    else
      theme_update(text = element_text(family = "HiraMaruProN-W4"))}
  library(see)
  library(gt)
  library(gtsummary)
  # theme_gtsummary_compact()
  options(crayon.enabled = FALSE,
          ggplot2.discrete.colour = function() scale_colour_material(),
          ggplot2.discrete.fill = function() scale_fill_material())
#+end_src

* COMMENT 講義概要
:PROPERTIES:
:ID:       1C55210B-919A-40C3-A01D-80F869054C39
:END:
# 東京大学
- *第1回 : 回帰モデルの考え方と推定*
- 第2回 : モデルの評価
- 第3回 : モデルによる予測と発展的なモデル

#+begin_src R :exports none :tangle no
  options(crayon.enabled = FALSE)
  setwd("~/Desktop/lectures/u-tokyo/autumn/course")
#+end_src
#+begin_src R :exports none 
  ### 第3講 サンプルコード
  library(tidyverse)
  library(broom)
  library(gt)
  library(gtsummary)
#+end_src


* 回帰分析の例
** ボルドーワインの価格と気候の関係
#+caption: ボルドーワインの価格と気候の関係
#+name: tbl:wine
#+begin_src R :exports none
  #' 重回帰の例
  #' 表の作成
  bw_data <- read_csv(file="data/wine.csv")
#+end_src
#+begin_src R :exports results :results output html
  #' データの表示(reveal用)
  bw_data |> slice(1:14) |> gt() |> as_raw_html()
#+end_src
#+begin_src R :exports results :results value scalar latex
  #' データの表示(latex用)
  bw_data |> gt() |> as_latex() |> as.character()
#+end_src

#+reveal: split
#+begin_src R :file figs/bw-pairs.png :exports results :results graphics
  bw_data |> 
      ggpairs(columns = 2:6,
              lower = list(continuous = wrap("smooth_loess", colour = "blue"))) +
      theme(axis.title.x = element_text(size = 8), # 文字の大きさを調整
            axis.title.y = element_text(size = 8)) 
#+end_src
#+caption: 価格と気候の散布図
#+name: fig:bw-pairs
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/bw-pairs.png]]

#+reveal: split
- 回帰式
  #+html: <font size=5>
  #+begin_quote
  \begin{equation}
    \text{LPRICE2}
    = 
    \beta_{0} +
    \beta_{1}\times\text{WRAIN} +
    \beta_{2}\times\text{DEGREES} +
    \beta_{3}\times\text{HRAIN} +
    \beta_{4}\times\text{TIME SV}
  \end{equation}
  #+end_quote
  #+html: </font>
#+caption: 価格と気候の関係
#+name: tbl:bw-lm
#+begin_src R :exports none
bw_fit <- lm(LPRICE2 ~ . - VINT, # VINTを除く全て
             data = bw_data)
#' 推定結果を表にまとめるためのパッケージ gtsummary を利用
#+end_src
#+begin_src R :exports results :results output html
  #' データの表示(reveal用)
  bw_fit |>
    tbl_regression(intercept = TRUE,
                   estimate_fun = label_style_sigfig(digits = 4)) |>
    add_glance_source_note(include = c(r.squared,adj.r.squared,statistic,p.value)) |>
    as_gt() |> as_raw_html()
#+end_src
#+begin_src R :exports results :results value scalar latex
  #' データの表示(latex用)
  bw_fit |>
    tbl_regression(intercept = TRUE,
                   estimate_fun = label_style_sigfig(digits = 4)) |>
    add_glance_source_note(include = c(r.squared,adj.r.squared,statistic,p.value)) |>
    as_gt() |> as_latex() |> as.character()
#+end_src

#+reveal: split
#+begin_src R :file figs/bw-prediction.png :exports results :results graphics
  bw_fit |>
    augment() |>
    ggplot(aes(x = LPRICE2, y = .fitted, label = VINT)) +
    geom_text(na.rm = TRUE) + # text で表示
    geom_abline(slope = 1, colour = "darkmagenta") +
    labs(x = "Price (log)", y = "Prediction")
#+end_src
#+caption: 重回帰による予測値と実際の価格
#+name: fig:fig-bw-prediction
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/bw-prediction.png]]

* 回帰分析の考え方
** 回帰分析
- ある変量を別の変量で説明する関係式を構成する
- 関係式 : *回帰式* (regression equation)
  - 説明される側 : *目的変数*, 被説明変数, 従属変数, 応答変数
  - 説明する側 : *説明変数*, 独立変数, 共変量
- 説明変数の数による分類
  - 一つの場合 : *単回帰* (simple regression)
  - 複数の場合 : *重回帰* (multiple regression)

** 一般の回帰の枠組
- *説明変数* : \(x_1,\dotsc,x_p\) (p次元)
- *目的変数* : \(y\) (1次元)
- *回帰式* : \(y\) を \(x_1,\dotsc,x_p\) で説明するための関係式
  #+begin_quote
  \begin{equation}
    y=f(x_1,\dotsc,x_p)
  \end{equation}
  #+end_quote
  #     一般には p変数関数 \(f\) を使う
- 観測データ : n個の \((y,x_1,\dotsc,x_p)\) の組
  #+begin_quote
  \begin{equation}
    \{(y_i,x_{i1},\dotsc,x_{ip})\}_{i=1}^n
  \end{equation}
  #+end_quote

** 線形回帰
- 任意の \(f\) では一般的すぎて分析に不向き
- \(f\) として *1次関数* を考える
  #+begin_quote
  ある定数 \(\beta_0,\beta_1,\dots,\beta_p\) を用いた式 :
  \begin{equation}
    f(x_1,\dots,x_p)=\beta_0+\beta_1x_1+\cdots+\beta_px_p
  \end{equation}
  #+end_quote
  - 1次関数の場合 : *線形回帰* (linear regression)
  - 一般の場合 : 非線形回帰 (nonlinear regression)
- 非線形関係は新たな説明変数の導入で対応可能
  - 適切な多項式 : \(x_j^2, x_jx_k, x_jx_kx_l,\dotsc\)
  - その他の非線形変換 : \(\log x_j, x_j^\alpha,\dotsc\)
  - 全ての非線形関係ではないことに注意

** 回帰係数
- 線形回帰式
  #+begin_quote
  \begin{equation}
    y=\beta_0+\beta_1x_1+\cdots+\beta_px_p
  \end{equation}
  #+end_quote
  - \(\beta_0,\beta_1,\dots,\beta_p\) : *回帰係数* (regression coefficients)
  - \(\beta_0\) : *定数項 / 切片* (constant term / intersection)
- 線形回帰分析 (linear regression analysis)
  - 未知の回帰係数をデータから決定する分析方法
  - 決定された回帰係数の統計的な性質を診断

** 回帰の確率モデル
- 回帰式の不確定性
  - データは一般に観測誤差などランダムな変動を含む
  - 回帰式がそのまま成立することは期待できない
- 確率モデル : データのばらつきを表す項 \(\epsilon_i\) を追加
  #+begin_quote
  \begin{equation}
    y_i=\beta_0+\beta_1 x_{i1}+\cdots+\beta_px_{ip}+\epsilon_i\quad (i=1,\dots,n)
  \end{equation}
  #+end_quote
  - \(\epsilon_1,\dots,\epsilon_n\) : *誤差項 / 撹乱項* (error / disturbance term)
    - 誤差項は独立な確率変数と仮定
    - 多くの場合，平均0，分散 \(\sigma^2\) の正規分布を仮定
- *推定* (estimation) :
  観測データから回帰係数を決定
  # \((\beta_0,\beta_1,\dots,\beta_p)\) 



* 回帰係数の推定
** 残差
- *残差* (residual) :
  回帰式で説明できない変動
- 回帰係数 \(\boldsymbol{\beta}=(\beta_0,\beta_1,\dotsc,\beta_p)^{\mathsf{T}}\) 
  を持つ回帰式の残差
  #+begin_quote
  \begin{equation}
    e_i(\boldsymbol{\beta})=
    y_i-(\beta_0+\beta_1 x_{i1}+\dotsb+\beta_px_{ip})
    \quad (i=1,\dotsc,n)
  \end{equation}
  #+end_quote
- 残差 \(e_i(\boldsymbol{\beta})\) の絶対値が小さいほど当てはまりがよい

** 最小二乗法
- *残差平方和* (residual sum of squares)
  #+begin_quote
  \begin{equation}
    S(\boldsymbol{\beta})
    =
    \sum_{i=1}^ne_i(\boldsymbol{\beta})^2
  \end{equation}
  #+end_quote
- *最小二乗推定量* (least squares estimator)
  #+begin_quote
  残差平方和
  \(S(\boldsymbol{\beta})\)
  を最小にする
  \(\boldsymbol{\beta}\)
  \begin{equation}
    \boldsymbol{\hat{\beta}}
    =
    (\hat{\beta}_0,\hat{\beta}_1,\dotsc,\hat{\beta}_p)^{\mathsf{T}}
    =
    \arg\min_{\boldsymbol{\beta}}S(\boldsymbol{\beta})
  \end{equation}
  #+end_quote

** 行列の定義
- デザイン行列 (design matrix)
  #+begin_quote
  \begin{equation}
    X=
    \begin{pmatrix}
      1 & x_{11} & x_{12} & \cdots & x_{1p} \\
      1 & x_{21} & x_{22} & \cdots & x_{2p} \\
      \vdots & \vdots & \vdots & & \vdots \\
      1 & x_{n1} & x_{n2} & \cdots & x_{np}
    \end{pmatrix}
  \end{equation}
  #+end_quote
  - \(n\times(p{+}1)\)行列

** ベクトルの定義
- 目的変数，誤差，回帰係数のベクトル
  #+begin_quote
  \begin{equation}
    \boldsymbol{y}=
    \begin{pmatrix}
      y_1 \\
      y_2 \\
      \vdots \\
      y_n
    \end{pmatrix},\quad
    \boldsymbol{\epsilon}=
    \begin{pmatrix}
      \epsilon_1 \\
      \epsilon_2 \\
      \vdots \\
      \epsilon_n
    \end{pmatrix},\quad
    \boldsymbol{\beta}=
    \begin{pmatrix}
      \beta_0 \\
      \beta_1 \\
      \vdots \\
      \beta_p
    \end{pmatrix}
  \end{equation}
  #+end_quote
  - \(\boldsymbol{y},\boldsymbol{\epsilon}\) は\(n\)次元ベクトル
  - \(\boldsymbol{\beta}\) は\(p{+}1\)次元ベクトル

** 行列・ベクトルによる表現
- 確率モデル
  #+begin_quote
  \begin{equation}
    \boldsymbol{y}
    =X\boldsymbol{\beta}+\boldsymbol{\epsilon}
  \end{equation}
  #+end_quote
- 残差平方和
  #+begin_quote
  \begin{equation}
    S(\boldsymbol{\beta})
    =(\boldsymbol{y}-X\boldsymbol{\beta})^{\mathsf{T}}
    (\boldsymbol{y}-X\boldsymbol{\beta})
  \end{equation}
  #+end_quote

** 解の条件
# 早稲田大学
- 解 \(\boldsymbol{\beta}\) では残差平方和の勾配は零ベクトル
  # \footnote{例えば杉浦光夫著「解析入門I」(東京大学出版会)の第II章定理8.1参照}:
  #+begin_quote
  \begin{equation}
    \frac{\partial S}{\partial\boldsymbol{\beta}}(\boldsymbol{\beta})
    =
    \Bigl(
    \frac{\partial S}{\partial\beta_0}(\boldsymbol{\beta}),
    \frac{\partial S}{\partial\beta_1}(\boldsymbol{\beta}),\dotsc,
    \frac{\partial S}{\partial\beta_p}(\boldsymbol{\beta})
    \Bigr)^{\mathsf{T}}
    =\boldsymbol{0}
  \end{equation}
  #+end_quote

** COMMENT 解の条件
# 東京大学
- 解 \(\boldsymbol{\beta}\) では残差平方和の勾配は零ベクトル
  # \footnote{例えば杉浦光夫著「解析入門I」(東京大学出版会)の第II章定理8.1参照}:
  #+begin_quote
  \begin{equation}
    \nabla S(\boldsymbol{\beta})=
    \Bigl(
    \frac{\partial S}{\partial\beta_0}(\boldsymbol{\beta}),
    \frac{\partial S}{\partial\beta_1}(\boldsymbol{\beta}),\dotsc,
    \frac{\partial S}{\partial\beta_p}(\boldsymbol{\beta})
    \Bigr)^\mathsf{T}=\boldsymbol{0}
  \end{equation}
  #+end_quote
- 成分 (\(j=0,1,\dotsc,p\)) ごとの条件式
  #+begin_quote
  \begin{equation}
    \frac{\partial S}{\partial\beta_j}(\boldsymbol{\beta})
    =
    -2\sum_{i=1}^n\Bigl(y_i-\sum_{k=0}^p\beta_kx_{ik}\Bigr)x_{ij}
    =0
  \end{equation}
  ただし \(x_{i0}=1\; (i=1,\dotsc,n)\)
  #+end_quote


* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 早稲田大学
** 問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 残差平方和
  \(S(\boldsymbol{\beta})\)
  をベクトル
  \(\boldsymbol{\beta}\)
  で微分して解の条件を求めなさい

** 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 残差平方和を展開しておく
  #+begin_quote
  \begin{align}
    S(\boldsymbol{\beta})
    &=
      (\boldsymbol{y}-X\boldsymbol{\beta})^{\mathsf{T}}
      (\boldsymbol{y}-X\boldsymbol{\beta})\\
    &=
      \boldsymbol{y}^{\mathsf{T}}\boldsymbol{y}
      -\boldsymbol{y}^{\mathsf{T}}X\boldsymbol{\beta}
      -(X\boldsymbol{\beta})^{\mathsf{T}}\boldsymbol{y}
      +(X\boldsymbol{\beta})^{\mathsf{T}}X\boldsymbol{\beta}\\
    &=
      \boldsymbol{y}^{\mathsf{T}}\boldsymbol{y}
      -\boldsymbol{y}^{\mathsf{T}}X\boldsymbol{\beta}
      -\boldsymbol{\beta}^{\mathsf{T}}X^{\mathsf{T}}\boldsymbol{y}
      +\boldsymbol{\beta}^{\mathsf{T}}X^{\mathsf{T}}X\boldsymbol{\beta}\\
  \end{align}
  #+end_quote
- ベクトルによる微分を行うと以下のようになる
  #+begin_quote
  \begin{align}
    \frac{\partial S}{\partial\boldsymbol{\beta}}(\boldsymbol{\beta})
    &=
      -(\boldsymbol{y}^{\mathsf{T}}X)^{\mathsf{T}}
      -X^{\mathsf{T}}\boldsymbol{y}
      +(X^{\mathsf{T}}X+(X^{\mathsf{T}}X)^{\mathsf{T}})\boldsymbol{\beta}\\
    &=
      -2X^{\mathsf{T}}\boldsymbol{y}
      +2X^{\mathsf{T}}X\boldsymbol{\beta}
  \end{align}
  #+end_quote
  

#+reveal: split
- したがって
  \(\boldsymbol{\beta}\)
  の満たす条件は以下となる
  #+begin_quote
  \begin{equation}
    -2X^{\mathsf{T}}\boldsymbol{y}
    +2X^{\mathsf{T}}X\boldsymbol{\beta}
    =0
    \quad\text{ より }
  \end{equation}
  \begin{equation}
    X^{\mathsf{T}}X\boldsymbol{\beta}
    =
    X^{\mathsf{T}}\boldsymbol{y}
  \end{equation}
  #+end_quote

** 補足
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 成分ごとの計算は以下のようになる
  #+begin_quote
  \begin{equation}
    \frac{\partial S}{\partial\beta_j}(\boldsymbol{\beta})
    =
    -2\sum_{i=1}^n\Bigl(y_i-\sum_{k=0}^p\beta_kx_{ik}\Bigr)x_{ij}
    =0
  \end{equation}
  ただし，
  \(x_{i0}=1\; (i=1,\dotsc,n)\),
  \(j=0,1,\dotsc,p\)
  \begin{equation}
    \sum_{i=1}^nx_{ij}\Bigl(\sum_{k=0}^px_{ik}\beta_k\Bigr)
    =
    \sum_{i=1}^nx_{ij}y_i\quad(j=0,1,\dotsc,p)
  \end{equation}
  \(x_{ij}\) は行列 \(X\) の \((i,j)\) 成分であることに注意
  #+end_quote


* 正規方程式
** 正規方程式
- *正規方程式* (normal equation)
  #+begin_quote
  \begin{equation}
    X^{\mathsf{T}}X\boldsymbol{\beta}
    =X^{\mathsf{T}}\boldsymbol{y}
  \end{equation}
  #+end_quote
- *Gram行列* (Gram matrix)
  #+begin_quote
  \begin{equation}
    X^{\mathsf{T}}X
  \end{equation}
  #+end_quote
  - \((p{+}1)\times(p{+}1)\) 行列 (正方行列)
  - 正定対称行列 (固有値が非負)

** 正規方程式の解
- 正規方程式の基本的な性質
  - 正規方程式は必ず解をもつ (一意に決まらない場合もある)
  - 正規方程式の解は最小二乗推定量であるための必要条件
- 解の一意性の条件
  - Gram 行列 \(X^{\mathsf{T}}X\) が *正則*
  - \(X\) の列ベクトルが独立 (後述)
- 正規方程式の解
  #+begin_quote
  \begin{equation}
    \boldsymbol{\hat{\beta}}
    =
    (X^{\mathsf{T}}X)^{-1}X^{\mathsf{T}}\boldsymbol{y}  
  \end{equation}
  #+end_quote


* COMMENT 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 東京大学
** R : 線形モデルの推定
:PROPERTIES:
:ID:       2E34C154-BD9D-4380-82E0-2D53B97D9F1E
:END:
- 関数 ~stats::lm()~ による推定
  #+begin_src R :eval no :tangle no
    lm(formula, data, subset, weights, na.action,
       method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,
       singular.ok = TRUE, contrasts = NULL, offset, ...)
    #' formula: 目的変数名 ~ 説明変数名(複数ある場合は + で並べる)
    #' data: 目的変数，説明変数を含むデータフレーム
    #' subset: 推定に用いるデータフレームの部分集合を指定(指定しなければ全て)
    #' na.action: 欠損の扱いを指定(既定値はoption("na.action")で設定された処理)
    #' model,x,y,qr: 返値にmodel.frame,model.matrix,目的変数,QR分解を含むか指定
  #+end_src
** 例 : ボルドーワインの価格と気候
- 配布データ ~wine.csv~ の回帰分析
  #+begin_src R :exports code
    bw_data <- read_csv(file="data/wine.csv")  # データの読み込み
    bw_fit <- lm(formula = LPRICE2 ~ . - VINT, # VINTを除く全て
                 data = bw_data) 
  #+end_src
  #+begin_src R
    bw_fit # 推定結果の簡単な表示
  #+end_src
  
** COMMENT データセットの準備
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 回帰分析では以下のデータセットを使用する
  - [[https://www.statlearning.com/s/Advertising.csv]]
    #+begin_quote
    広告費(TV,radio,newspapers)と売上の関係を調べたもの
    #+end_quote
    - 参考 : https://www.statlearning.com
      #+begin_quote
      "Datasets in this presentation are taken from "An
      Introduction to Statistical Learning, with applications in R"
      (Springer, 2013) with permission from the authors: G. James,
      D. Witten, T. Hastie and R. Tibshirani "
      #+end_quote
  - ~tokyo_weather.csv~ (配付)
    #+begin_quote
    気象庁より取得した東京の気候データを回帰分析用に整理したもの
    #+end_quote
    - 参考 : https://www.data.jma.go.jp/gmd/risk/obsdl/index.php

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- データセット ~Advertising.csv~ は
  広告費 (TV, radio, newspapers) と売上の関係を調べたものである．
  このデータセットを用いて以下の回帰式を推定しなさい．
  #+begin_src R :eval no :tangle no
    formula = sales ~ TV 
    formula = sales ~ radio
    formula = sales ~ TV + radio
  #+end_src
  - URL : [[https://www.statlearning.com/s/Advertising.csv]]
  - データに関する記載事項 (https://www.statlearning.com より) 
    #+begin_quote
    Datasets in this presentation are taken from "An Introduction to
    Statistical Learning, with applications in R" (Springer, 2013)
    with permission from the authors: G. James, D. Witten, T. Hastie
    and R. Tibshirani.
    #+end_quote

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- データセット ~tokyo_weather.csv~ は
  気象庁より取得した東京の気候データを回帰分析用に整理したものである．
  このデータセットのうち，9月の気候データを用いて，以下の回帰式を推定しなさい．
  #+begin_src R :eval no :tangle no
    formula = temp ~ solar + press
  #+end_src
  - 参考 : https://www.data.jma.go.jp/gmd/risk/obsdl/index.php

** COMMENT 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       9010402A-AC86-4A3F-9A0F-397A945FACB5
:END:
- 前掲のデータセットを用いて回帰式を構成しなさい
  - 東京の9月の気候データ
    #+begin_src R :eval no :tangle no
      formula = temp ~ solar + press
    #+end_src
  - 広告費と売上データ
    #+begin_src R :eval no :tangle no
      formula = sales ~ TV 
      formula = sales ~ radio
      formula = sales ~ TV + radio
    #+end_src
** COMMENT 解答例
#+begin_src R :exports none :tangle no
  #' ---------------------------------------------------------------------------
  #' @practice 回帰係数の推定
#+end_src
#+begin_src R :eval no :exports none :tangle no
  #' 広告費と売上データによる回帰分析

  #' データの読み込み
  adv_data <- read_csv("https://www.statlearning.com/s/Advertising.csv")
  #' 散布図を描くために package::GGally を利用
  library(GGally) # パッケージの読み込み
  ggpairs(adv_data, columns=2:5) # 散布図

  #' TVの宣伝費で売上を説明
  (adv_lm1 <- lm(sales ~ TV, data = adv_data))
  adv_data |>
    ggplot(aes(x = TV, y = sales)) +
    geom_point(colour="orange") +
    geom_smooth(method=lm,se=FALSE)
  #' adv_lm1 を利用する方法は後述

  #' radioの宣伝費で売上を説明
  (adv_lm2 <- lm(sales ~ radio, data = adv_data))
  adv_data |>
    ggplot(aes(x = radio, y = sales)) +
    geom_point(colour="orange") +
    geom_smooth(method=lm,se=FALSE)

  #' 両者の宣伝費で売上を説明
  (adv_lm3 <- lm(sales ~ TV + radio, data = adv_data))
  #' 3次元の散布図を描くために package::scatterplot3d を利用
  #' 必要であれば install.packages("scatterplot3d") を実行
  library(scatterplot3d) # パッケージの読み込み
  s3d <- scatterplot3d( 
    adv_data[c("TV","radio","sales")], # x,y,z の順
    type = "p", # plotの種類: "p"点，"l"線，"h"足付き
    pch = 16,# 点の種類 (?points 参照)
    angle = 45, # xy平面の見る方向 (適宜調整)
    highlight.3d = TRUE # 高さ(z)ごとに色を変える
  )
  s3d$plane3d(adv_lm3, col = "blue", # 回帰式の定める平面の追加
              draw_polygon = TRUE, # 平面の塗り潰しの設定
              polygon_args = list(col = rgb(0,0,1,0.2))) 
#+end_src
#+begin_src R :eval no :exports none :tangle no
  #' 東京の気候データによる回帰分析
  #' データの読み込み
  tw_data <- read_csv("data/tokyo_weather.csv")

  #' モデルの推定: 9月の"気温"を目的変数，"日射量・気圧"を説明変数とする
  tw_formula <- temp ~ solar + press # モデル式の定義 
  class(tw_formula)                  # formula class であることを確認
  (tw_lm <- lm(tw_formula, # 回帰係数の推定
               data = tw_data, 
               subset =  month==9)) # 9月のデータの抽出
  (tw_df <- as_tibble(model.frame(tw_lm))) # 推定に用いたデータフレームの抽出
  ggpairs(tw_df) # 散布図

  #' 散布図と回帰式の定める平面の描画(3次元プロット)
  s3d <- scatterplot3d( 
    tw_df[c("solar","press","temp")], # x,y,z の順
    type = "p", # plotの種類: "p"点，"l"線，"h"足付き
    pch = 16,# 点の種類 (?points 参照)
    angle = 30, # xy平面の見る方向 (適宜調整)
    highlight.3d = TRUE # 高さ(z)ごとに色を変える
  )
  s3d$plane3d(tw_lm, col = "blue", # 回帰式の定める平面の追加
              draw_polygon = TRUE, # 平面の塗り潰しの設定
              polygon_args = list(col = rgb(0,0,1,0.1))) 
#+end_src
#+begin_src R :exports none :tangle no
  #' ---------------------------------------------------------------------------
#+end_src
  
** COMMENT 講義資料 : 回帰式の推定
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/04-lm.r][04-lm.r]] を確認してみよう


* 最小二乗推定量の性質
** 解析の上での良い条件
- 最小二乗推定量がただ一つだけ存在する条件 
  - \(X^{\mathsf{T}}X\) が正則
  - \(X^{\mathsf{T}}X\) の階数が \(p{+}1\)
  - \(X\) の階数が \(p{+}1\)
  - \(X\) の列ベクトルが *1次独立*
  これらは同値条件

** 解析の上での良くない条件
- 説明変数が1次従属 : *多重共線性* (multicollinearity)
- 多重共線性が強くならないように説明変数を選択
  - \(X\) の列(説明変数)の独立性を担保する
  - 説明変数が互いに異なる情報をもつように選ぶ
  - 似た性質をもつ説明変数の重複は避ける
    
** 推定の幾何学的解釈
- *あてはめ値 / 予測値* (fitted values / predicted values)
  #+begin_quote
  \begin{equation}
    \boldsymbol{\hat{y}}
    =
    X\boldsymbol{\hat{\beta}}
    =
    \hat{\beta}_{0} X_\text{第0列} + 
    \dots + \hat{\beta}_{p} X_\text{第p列}
  \end{equation}
  #+end_quote

#+caption: \(n=3\) , \(p+1=2\) の場合の最小二乗法による推定
#+name:   fig:projection
#+attr_html: :width 60%
#+attr_latex: :width 0.6\linewidth
[[file:./figs/projection.png]]

#+reveal: split
- 最小二乗推定量 \(\boldsymbol{\hat{y}}\) の幾何学的性質
  - \(L[X]\) : \(X\) の列ベクトルが張る \(\mathbb{R}^n\) の線形部分空間
  - \(X\) の階数が \(p{+}1\) ならば \(L[X]\) の次元は \(p{+}1\) (解の一意性)
  - \(\boldsymbol{\hat{y}}\) は \(\boldsymbol{y}\) の \(L[X]\) への直交射影
  - *残差* (residuals)
    \(\boldsymbol{\hat{\epsilon}}=\boldsymbol{y}-\boldsymbol{\hat{y}}\)
    はあてはめ値
    \(\boldsymbol{\hat{y}}\) に直交
    #+begin_quote
    \begin{equation}
      \boldsymbol{\hat{\epsilon}}\cdot\boldsymbol{\hat{y}}=0
    \end{equation}
    #+end_quote

** 線形回帰式と標本平均
- \(\boldsymbol{x}_i=(x_{i1},\dotsc,x_{ip})^{\mathsf{T}}\):
   \(i\) 番目の観測データの説明変数
- 説明変数および目的変数の標本平均
  #+begin_quote
  \begin{align}
    \boldsymbol{\bar{x}}
    &=\frac{1}{n}\sum_{i=1}^n\boldsymbol{x}_i,
    &\bar{y}
    % \overline{\boldsymbol{x}^2}&=\frac{1}{n}\sum_{i=1}^n\boldsymbol{x}_i\boldsymbol{x}_i^{\mathsf{T}},&
    &=\frac{1}{n}\sum_{i=1}^ny_i,&
    % \overline{\boldsymbol{x}y}&=\frac{1}{n}\sum_{i=1}^n\boldsymbol{x}_iy_i
  \end{align}
  #+end_quote
- \(\boldsymbol{\hat{\beta}}\) が最小二乗推定量のとき以下が成立
  #+begin_quote
  \begin{equation}
    \bar{y}
    =
    (1,\boldsymbol{\bar{x}}^{\mathsf{T}})\boldsymbol{\hat{\beta}}
  \end{equation}
  #+end_quote
  # #+BEGIN_QUOTE
  # 幾何学的には \(y=(1,\boldsymbol{x}^{\mathsf{T}})\boldsymbol{\hat{\beta}}\) 
  # によって定まる超平面は常に点 \((\boldsymbol{\bar{x}}^{\mathsf{T}},\bar{y})\) 
  # (標本平均)を通る
  # #+END_QUOTE


* COMMENT 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 東京大学
** R : 推定結果からの情報の取得
:PROPERTIES:
:ID:       FAD1BBAA-3D02-49EC-9CAA-91C5EE6AA80E
:END:
- 関数 ~lm()~ の出力には様々な情報が含まれる
  #+begin_src R :eval no :tangle no
    #' lmの出力を引数とする base R の関数の例
    base::summary(lmの出力)       # 推定結果のまとめ
    stats::coef(lmの出力)         # 推定された回帰係数
    stats::fitted(lmの出力)       # あてはめ値
    stats::resid(lmの出力)        # 残差
    stats::model.frame(lmの出力)  # modelに必要な変数の抽出 (データフレーム)
    stats::model.matrix(lmの出力) # デザイン行列
  #+end_src

** R : broom パッケージ
:PROPERTIES:
:END:
- 関数 ~base::summary()~ の tidyverse 版
- 関数 ~stats::lm()~ の結果を tibble 形式で表示
  #+begin_src R :eval no :tangle no
    #' 推定結果の tibble 形式での表示
    broom::tidy(lmの出力)    # 推定結果のまとめ．coef(summary(lmの出力)) と同様
    broom::glance(lmの出力)  # 評価指標(統計量)のまとめ．決定係数やF値などを整理
    broom::augment(lmの出力) # 入出力データのまとめ．あてはめ値・残差などを整理
  #+end_src
  
** R : 行列とベクトル
- データフレーム以外の重要なデータ構造
  - ベクトル (vector) : 1次元の配列
  - 行列 (matrix) : 2次元の同じデータ型の配列
- 必要であれば明示的に変換できる
  #+begin_src R :eval no :tangle no
    as.vector(データフレーム[列名]) # base::as.vector()
    as_vector(データフレーム[列名]) # purrr::as_vector()
    as.matrix(データフレーム) # base::as.matrix()
    #' データフレームを行列に変換する場合は全て同じデータ型でなくてはならない
  #+end_src
  
** R : 行列とベクトルの計算
:PROPERTIES:
:ID:       EDD9427D-C9BB-4971-91A7-A2352AE47708
:END:
- 行列 \(A,B\) の積 \(AB\) および
  ベクトル \(a,b\) の内積 \(a\cdot b\)
  #+begin_src R :eval no :tangle no
    A %*% B # 行列の大きさは適切である必要がある
    a %*% b # ベクトルは同じ長さである必要がある
  #+end_src
- 正方行列 \(A\) の逆行列 \(A^{-1}\)
  #+begin_src R :eval no :tangle no
    solve(A) # 他にもいくつか関数はある
  #+end_src
- \(X^{\mathsf{T}}Y\) および \(X^{\mathsf{T}}X\) の計算
  #+begin_src R :eval no :tangle no
    crossprod(X, Y) # cross product の略
    #' X: 行列 (またはベクトル)
    #' Y: 行列 (またはベクトル)
    crossprod(X) # 同じものを掛ける場合は引数は1つで良い
  #+end_src
  #+begin_src R :exports none
    #' @notes
    #' 行列の転置を計算する関数t()と積を組み合わせてもよい
    #'   crossprod(X,Y) = t(X) %*% Y
    #' XY^T = (X^TY)^T を計算する関数 tcrossprod() もある
    #'   tcrossprod(X,Y) = X %*% t(Y)
  #+end_src

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       0805FCD8-3938-4127-9EC7-5637E89D9453
:END:
- 前問の推定結果を用いて
  最小二乗推定量の性質を確認しなさい
  - 推定された係数が正規方程式の解
    #+begin_quote
    \begin{equation}
      \boldsymbol{\hat{\beta}}
      =
      (X^{\mathsf{T}}X)^{-1}X^{\mathsf{T}}\boldsymbol{y}  
    \end{equation}
    #+end_quote
    となること
  - あてはめ値と残差が直交すること
  - 回帰式が標本平均を通ること
** COMMENT 解答例    
#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 最小二乗推定量の性質
#+end_src
#+begin_src R :eval no :exports none
  #' 広告費と売上データ

  #' 回帰係数と正規方程式の解の一致
  (beta <- coef(adv_lm3))        # 推定された回帰係数
  X <- model.matrix(adv_lm3)     # デザイン行列
  Y <- model.frame(adv_lm3)[[1]] # 目的変数 (データフレームの1列目のベクトル)
  solve(crossprod(X)) %*% crossprod(X, Y) # 正規方程式の解

  #' あてはめ値と残差の直交性
  yhat <- fitted(adv_lm3) # あてはめ値
  ehat <- resid(adv_lm3)  # 残差
  yhat %*% ehat           # 直交すれば内積はO

  #' 回帰式が標本平均を通ること
  colMeans(X) %*% beta # 説明変数の標本平均のあてはめ値
  mean(Y)              # 目的変数の標本平均 
#+end_src
#+begin_src R :eval no :exports none
  #' @notes
  #' 関数 stats::model.matrix() の返値は matrix class である
  #' 関数 stats::model.frame() の返値は data.frame class であり
  #' model.frame(...)[[k]] は data.frame ではなく vector になる
  #' tibble(...)[[k]] は vector となるが，
  #' tibble(...)[k] は vector ではなく1列の tibble になるので注意
  #' 関数 base::crossprod() の引数は厳密に vector/matrix であることを要請する
  #' 例えば adv_data は全て数値なので行列に変換が可能で計算できる
  crossprod(adv_data) # データフレームのままなので計算できない
  crossprod(as.matrix(adv_data)) # 計算できる
#+end_src
#+begin_src R :eval no :exports none
  #' 東京の気候データ

  #' 回帰係数と正規方程式の解の一致
  (beta <- coef(tw_lm))          # 推定された回帰係数
  (X <- model.matrix(tw_lm))     # デザイン行列
  (Y <- model.frame(tw_lm)[[1]]) # 目的変数 (データフレームの1列目のベクトル)
  solve(crossprod(X)) %*% crossprod(X, Y) # 正規方程式の解

  #' あてはめ値と残差の直交性
  yhat <- fitted(tw_lm) # あてはめ値
  ehat <- resid(tw_lm)  # 残差
  yhat %*% ehat          # 直交すれば内積はO(に近い値)となる

  #' 回帰式が標本平均を通ること
  colMeans(X) %*% beta # 説明変数の標本平均のあてはめ値
  mean(Y)              # 目的変数の標本平均 
#+end_src
#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
#+end_src

** COMMENT 講義資料: 最小二乗推定量の性質
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/04-lse.r][04-lse.r]] を確認してみよう
  

* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 早稲田大学
** 問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 最小二乗推定量について以下を示しなさい
  - 残差の標本平均が0となる
    #+begin_quote
    目的変数や残差のベクトルについて以下を示せばよい
    \begin{equation}
      \boldsymbol{1}^{\mathsf{T}}(\boldsymbol{y}-\boldsymbol{\hat{y}})
      =\boldsymbol{1}^{\mathsf{T}}\boldsymbol{\hat{\epsilon}}
      =0
    \end{equation}
    ただし \(\boldsymbol{1}=(1,\dotsc,1)^{\mathsf{T}}\) とする
    #+end_quote
  - 回帰式が標本平均を通る
    #+begin_quote
    \begin{equation}
      \bar{y}
      =
      (1,\boldsymbol{\bar{x}}^{\mathsf{T}})\boldsymbol{\hat{\beta}}
    \end{equation}
    #+end_quote

** 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 残差の表現を整理する
  #+begin_quote
  \begin{align}
    \boldsymbol{\hat{\epsilon}}
    &=
      \boldsymbol{y}-\boldsymbol{\hat{y}}
      =
      \boldsymbol{y}-X\boldsymbol{\hat{\beta}}\\
    &=
      \boldsymbol{y}-X(X^{\mathsf{T}}X)^{-1}X^{\mathsf{T}}\boldsymbol{y}
  \end{align}
  #+end_quote
- 左から \(X^{\mathsf{T}}\) を乗じる
  #+begin_quote
  \begin{equation}
    X^{\mathsf{T}}\boldsymbol{y}-X^{\mathsf{T}}X(X^{\mathsf{T}}X)^{-1}X^{\mathsf{T}}\boldsymbol{y}
    =
    X^{\mathsf{T}}\boldsymbol{y}-X^{\mathsf{T}}\boldsymbol{y}
    =0
  \end{equation}
  #+end_quote
- 行列 \(X\) の 1列目が \(\boldsymbol{1}\) であることより明らか

#+reveal: split
- 説明変数の標本平均をデザイン行列で表す
  #+begin_quote
  \begin{equation}
    \boldsymbol{1}^{\mathsf{T}}X
    =
    n(1,\boldsymbol{\bar{x}}^{\mathsf{T}})
  \end{equation}
  #+end_quote
- したがって以下が成立する
  #+begin_quote
  \begin{align}
    n(1,\boldsymbol{\bar{x}}^{\mathsf{T}})\boldsymbol{\hat{\beta}}
    &=
      \boldsymbol{1}^{\mathsf{T}}X\boldsymbol{\hat{\beta}}\\
    &=
      \boldsymbol{1}^{\mathsf{T}}\boldsymbol{\hat{y}}
      =
      \boldsymbol{1}^{\mathsf{T}}\boldsymbol{y}\\
    &=
      n\bar{y}
  \end{align}
  #+end_quote

  
* 残差の分解
** 最小二乗推定量の残差
- 観測値と推定値 \(\boldsymbol{\hat{\beta}}\) による予測値の差
  #+begin_quote
  \begin{equation}
    \hat{\epsilon}_i=
    y_i-(\hat{\beta}_0+\hat{\beta}_1 x_{i1}+\dotsb+\hat{\beta}_px_{ip})
    \quad (i=1,\dotsc,n)
  \end{equation}
  #+end_quote
  - 誤差項 \(\epsilon_1,\dotsc,\epsilon_n\) の推定値
  - 全てができるだけ小さいほど良い
  - 予測値とは独立に偏りがないほど良い
- 残差ベクトル
  #+begin_quote
  \begin{equation}
    \boldsymbol{\hat{\epsilon}}
    =\boldsymbol{y}-\boldsymbol{\hat{y}}
    =(\hat{\epsilon}_1,\hat{\epsilon}_2,\dotsc,\hat{\epsilon}_n)^{\mathsf{T}}
  \end{equation}
  #+end_quote
  # - 標本平均のベクトル
  #   \begin{equation}
  #     \bar{\boldsymbol{y}}=\bar{y}\boldsymbol{1}=(\bar{y},\bar{y},\dotsc,\bar{y})^{\mathsf{T}}
  #   \end{equation}

** 平方和の分解
- \(\bar{\boldsymbol{y}}=\bar{y}\boldsymbol{1}=(\bar{y},\bar{y},\dotsc,\bar{y})^{\mathsf{T}}\) :
  標本平均のベクトル 
- いろいろなばらつき
  - \(S_y=(\boldsymbol{y}-\bar{\boldsymbol{y}})^{\mathsf{T}}
    (\boldsymbol{y}-\bar{\boldsymbol{y}})\) :
    目的変数のばらつき
  - \(S_{\phantom{y}}=(\boldsymbol{y}-\boldsymbol{\hat{y}})^{\mathsf{T}}
    (\boldsymbol{y}-\boldsymbol{\hat{y}})\) :
    残差のばらつき
    (\(\boldsymbol{\hat{\epsilon}}^{\mathsf{T}}\boldsymbol{\hat{\epsilon}}\))
  - \(S_r=(\boldsymbol{\hat{y}}-\bar{\boldsymbol{y}})^{\mathsf{T}}
    (\boldsymbol{\hat{y}}-\bar{\boldsymbol{y}})\) :
    あてはめ値(回帰)のばらつき
- 3つのばらつき(平方和)の関係
  #+begin_quote
  \begin{equation}
    (\boldsymbol{y}-\bar{\boldsymbol{y}})^{\mathsf{T}}
    (\boldsymbol{y}-\bar{\boldsymbol{y}})
    =
    (\boldsymbol{y}-\boldsymbol{\hat{y}})^{\mathsf{T}}
    (\boldsymbol{y}-\boldsymbol{\hat{y}})+ 
    (\boldsymbol{\hat{y}}-\bar{\boldsymbol{y}})^{\mathsf{T}}
    (\boldsymbol{\hat{y}}-\bar{\boldsymbol{y}})
  \end{equation}
  \begin{equation}
    S_y=S+S_r
  \end{equation}
  #+end_quote


* COMMENT 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 東京大学
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       24C4364D-224C-4ECA-AFAE-2A32E3B62A4A
:END:
- 前問の結果を用いて
  残差の性質を確認しなさい
  - 以下の分解が成り立つこと
    #+begin_quote
    \begin{equation}
      (\boldsymbol{y}-\bar{\boldsymbol{y}})^{\mathsf{T}}
      (\boldsymbol{y}-\bar{\boldsymbol{y}})
      =
      (\boldsymbol{y}-\boldsymbol{\hat{y}})^{\mathsf{T}}
      (\boldsymbol{y}-\boldsymbol{\hat{y}})+ 
      (\boldsymbol{\hat{y}}-\bar{\boldsymbol{y}})^{\mathsf{T}}
      (\boldsymbol{\hat{y}}-\bar{\boldsymbol{y}})
    \end{equation}
    \begin{equation}
      S_y=S+S_r
    \end{equation}
    #+end_quote
** COMMENT 解答例
#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 残差の分解
#+end_src
#+begin_src R :eval no :exports none
  #' 広告費と売上データ
  summary(adv_lm3)
  Y <- model.frame(adv_lm3)[[1]]           # 目的変数の取得
  (Sy <- sum((Y-mean(Y))^2))               # 目的変数のばらつき
  (S <- sum(resid(adv_lm3)^2))             # 残差のばらつき
  (Sr <- sum((fitted(adv_lm3)-mean(Y))^2)) # 回帰のばらつき
  S+Sr # Sy と同じになっている
#+end_src
#+begin_src R :eval no :exports none
  #' 東京の気候データ
  tw_formula # モデルの確認
  #' 以下は目的変数を推定結果に含める方法
  tw_lm <- lm(tw_formula,
              data = tw_data, 
              subset = month == 9, # 9月のデータの抽出
               y = TRUE) # 目的変数をyとして返すように指定
  Y <- with(tw_lm,y)                     # 目的変数の取得 (tw_lm$y でも可)
  (Sy <- sum((Y-mean(Y))^2))             # 目的変数のばらつき
  (S <- sum(resid(tw_lm)^2))             # 残差のばらつき
  (Sr <- sum((fitted(tw_lm)-mean(Y))^2)) # 回帰のばらつき
  S+Sr # Sy と同じになっている
#+end_src
#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
#+end_src

** COMMENT 講義資料: 残差の性質
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/04-resid.r][04-resid.r]] を確認してみよう


* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 早稲田大学
** 問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 以下の関係式を示しなさい
  - あてはめ値と残差のベクトルが直交する
    #+begin_quote
    \begin{equation}
      \boldsymbol{\hat{y}}^{\mathsf{T}}(\boldsymbol{y}-\boldsymbol{\hat{y}})
      = 
      \boldsymbol{\hat{y}}^{\mathsf{T}}\boldsymbol{\hat{\epsilon}}
      =0
    \end{equation}
    #+end_quote
  - 残差平方和の分解が成り立つ
    #+begin_quote
    \begin{equation}
      S_y=S+S_r
    \end{equation}
    #+end_quote

** 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 残差の表現を整理する
  #+begin_quote
  \begin{align}
    \boldsymbol{\hat{\epsilon}}
    &=
      \boldsymbol{y}-X(X^{\mathsf{T}}X)^{-1}X^{\mathsf{T}}\boldsymbol{y}\\
    &=
      (I-X(X^{\mathsf{T}}X)^{-1}X^{\mathsf{T}})\boldsymbol{y}
  \end{align}
  #+end_quote
- 左から \(\boldsymbol{\hat{y}}\) を乗じる
  #+begin_quote
  \begin{align}
    \boldsymbol{\hat{y}}^{\mathsf{T}}\boldsymbol{\hat{\epsilon}}
    &=
      \boldsymbol{\hat{\beta}}^{\mathsf{T}}X^{\mathsf{T}}
      (I-X(X^{\mathsf{T}}X)^{-1}X^{\mathsf{T}})\boldsymbol{y}\\
    &=
      \boldsymbol{\hat{\beta}}^{\mathsf{T}}
      (X^{\mathsf{T}}-X^{\mathsf{T}}X(X^{\mathsf{T}}X)^{-1}X^{\mathsf{T}})\boldsymbol{y}\\
    &=
      \boldsymbol{\hat{\beta}}^{\mathsf{T}}
      (X^{\mathsf{T}}-X^{\mathsf{T}})\boldsymbol{y}=0
  \end{align}
  #+end_quote

#+reveal: split
- 以下の関係を用いて展開すればよい
  #+begin_quote
  \begin{equation}
    \boldsymbol{y}-\bar{\boldsymbol{y}}
    =\boldsymbol{y}-\boldsymbol{\hat{y}}+\boldsymbol{\hat{y}}-\bar{\boldsymbol{y}}
  \end{equation}
  ただし \(\bar{\boldsymbol{y}}=\bar{y}\boldsymbol{1}\) 
  #+end_quote
- このとき以下の項は0になる
  #+begin_quote
  \begin{equation}
    (\boldsymbol{\hat{y}}-\bar{\boldsymbol{y}})^{\mathsf{T}}
    (\boldsymbol{y}-\boldsymbol{\hat{y}})
    =
    \boldsymbol{\hat{y}}^{\mathsf{T}}
    (\boldsymbol{y}-\boldsymbol{\hat{y}})
    -
    \bar{y}\boldsymbol{1}^{\mathsf{T}}
    (\boldsymbol{y}-\boldsymbol{\hat{y}})
    =0
  \end{equation}
  #+end_quote


* 決定係数
** 回帰式の寄与
- ばらつきの分解
  #+begin_quote
  \begin{equation}
    S_y\;\text{(目的変数)} =S\;\text{(残差)} +S_r\;\text{(あてはめ値)}
  \end{equation}
  #+end_quote
- 回帰式で説明できるばらつきの比率
  #+begin_quote
  \begin{equation}
    \text{(回帰式の寄与率)}
    = \frac{S_{r}}{S_{y}}
    = 1-\frac{S}{S_{y}}
  \end{equation}
  #+end_quote
- 回帰式のあてはまり具合を評価する代表的な指標

** 決定係数 (\(R^2\)値)
- *決定係数* (R-squared)
  #+begin_quote
  \begin{equation}
    R^2
    =
    1-\frac{\sum_{i=1}^n\hat{\epsilon}_i^2}{\sum_{i=1}^n(y_i-\bar{y})^2}
  \end{equation}
  #+end_quote
- *自由度調整済み決定係数* (adjusted R-squared)
  #+begin_quote
  \begin{equation}
    \bar{R}^2
    =
    1-\frac{\frac{1}{n{-}p{-}1}\sum_{i=1}^n\hat{\epsilon}_i^2}
    {\frac{1}{n{-}1}\sum_{i=1}^n(y_i-\bar{y})^2}
  \end{equation}
  #+end_quote
  - 不偏分散で補正している


* COMMENT 決定係数 springから
** 決定係数
- \(X\) が \(Y\) の変動をどの程度説明できるかを数量化
- *決定係数* (あるいは *寄与率*)
  #+begin_quote
  \begin{equation}
    R^{2}=
    \frac{\sum_{i=1}^{n}(\hat{Y}_{i}-\bar{Y})^{2}}{\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}
  \end{equation}
  #+end_quote
- \(\hat{Y}_{i}\) は
  *あてはめ値* または *予測値* と呼ばれる
  #+begin_quote
  \begin{equation}
    \hat{Y}_{i}=
    \hat{\alpha}+\hat{\beta}X_{i}\quad(i=1,\dotsc,n).  
  \end{equation}
  #+end_quote

#+reveal: split
- 以下の等式が成立
  #+begin_quote
  \begin{align}
    &\hat{\epsilon}_i
      =Y_i-\hat{Y}_i\quad (i=1,\dotsc,n)\\
    &\sum_{i=1}^{n}\hat{\epsilon}_i=0,\\
    &\frac{1}{n}\sum_{i=1}^nY_i=\bar{Y},\\
    &\frac{1}{n}\sum_{i=1}^n\hat{Y}_i=\bar{Y}.
  \end{align}
  #+end_quote

#+reveal: split
- 決定係数
  #+begin_quote
  \begin{equation}
    R^{2}=
    \frac{\sum_{i=1}^{n}(\hat{Y}_{i}-\bar{Y})^{2}}{\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}
  \end{equation}
  #+end_quote
- \(R^2\) の成分
  - \(R^2\) の分子 : あてはめ値の(標本平均まわりでの)変動
  - \(R^2\) の分母 : 目的変数の(標本平均まわりでの)変動
- \(R^2\) の意味
  - 回帰式が目的変数の変動をどの位説明できるか評価
  - 大きいほど説明力が高いと解釈される

** 決定係数の別表現
- \(R^2\) は以下のように書き直すことも可能
  - 目的変数の観測データとあてはめ値の相関の二乗
    #+begin_quote
    \begin{equation}
      R^{2}=
      \left\{
        \frac{\sum_{i=1}^{n}(\hat{Y}_{i}-\bar{Y})(Y_{i}-\bar{Y})}
        {\sqrt{\sum_{i=1}^{n}(\hat{Y}_{i}-\bar{Y})^{2}}
          \cdot
          \sqrt{\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}}
      \right\}^{2}
    \end{equation}
    #+end_quote
  - 説明変数と目的変数の観測データの間の相関の二乗
    #+begin_quote
    \begin{equation}
      R^{2}=
      \left\{
        \frac{\sum_{i=1}^{n}(X_{i}-\bar{X})(Y_{i}-\bar{Y})}
        {\sqrt{\sum_{i=1}^{n}(X_{i}-\bar{X})^{2}}
          \cdot
          \sqrt{\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}}
      \right\}^{2}
    \end{equation}
    #+end_quote

** 自由度調整済み決定係数
- 不偏分散による \(R^2\) の修正
  - 残差 \(\epsilon_i\) と目的変数 \(Y_i\) の標本分散による表現
    #+begin_quote
    \begin{equation}
      R^{2}
      =1-\frac{\frac{1}{n}\sum_{i=1}^{n}\hat{\epsilon}_{i}^{2}}{\frac{1}{n}\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}.
    \end{equation}
    #+end_quote
  - 不偏推定量で代替 : *自由度調整済み決定係数* (または寄与率)
    #+begin_quote
    \begin{equation}
      \bar{R}^{2}
      =1-\frac{\frac{1}{n{-}2}\sum_{i=1}^{n}\hat{\epsilon}_{i}^{2}}{\frac{1}{n-1}\sum_{i=1}^{n}(Y_{i}-\bar{Y})^{2}}.
    \end{equation}
    #+end_quote

** 決定係数の計算
:PROPERTIES:
:ID:       1E08B1FB-CEA5-4DE9-A958-DDC9676B18E7
:END:
- 関数 ~stat::summary()~ : 情報の要約 (base R)
  #+begin_src R :eval no :tangle no
    summary(object)
    #' object: 関数 lm() で推定したモデル
    #' 関数の出力 (リスト名 $"名前" で参照可能)
    #' r.squareds : 決定係数
    #' adj.r.squareds : 自由度調整済み決定係数
    #' 詳細は '?summary.lm' を参照
  #+end_src

#+reveal: split
- 関数 ~broom::tidy()~ : 回帰係数の情報 (tidyverse)
  #+begin_src R :eval no :tangle no
    tidy(x, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE, ...)
    #' x: 関数 lm() で推定したモデル
    #' conf.int: 信頼区間を付けるか否か
    #' conf.level: 信頼係数
    #' 詳細は '?broom::tidy.lm' を参照
  #+end_src
- 関数 ~broom::glance()~ : モデルの統計情報 (tidyverse)
  #+begin_src R :eval no :tangle no
    glance(x, ...)
    #' x: 関数 lm() で推定したモデル
    #' F統計量は statistic/p.value の列
    #' 詳細は '?broom::glance.lm' を参照
  #+end_src


* COMMENT 実習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
# 東京大学
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:ID:       335A639C-748D-4FC8-B0DB-471A3C0F38CB
:END:
- 決定係数を用いてモデルの比較を行いなさい
  - 広告費と売上データ
    #+begin_src R :eval no :tangle no
      sales ~ TV
      sales ~ radio
      sales ~ TV + radio
    #+end_src
  - 東京の9月の気候データ
    #+begin_src R :eval no :tangle no
      temp ~ solar
      temp ~ solar + press
      temp ~ solar + press + cloud
    #+end_src
** COMMENT 解答例
#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
  #' @practice 決定係数によるモデルの比較
#+end_src
#+begin_src R :eval no :exports none
  #' 広告費と売上データ

  #' モデルの比較
  adv_formula1 <- sales ~ TV
  adv_formula2 <- sales ~ radio
  adv_formula3 <- sales ~ TV + radio
  adv_lm1 <- lm(adv_formula1, data=adv_data, y = TRUE)
  adv_lm2 <- lm(adv_formula2, data=adv_data, y = TRUE)
  adv_lm3 <- lm(adv_formula3, data=adv_data, y = TRUE)
  summary(adv_lm1)$adj.r.squared # 自由度調整済み決定係数
  summary(adv_lm2)$adj.r.squared # (model1より減少)
  summary(adv_lm3)$adj.r.squared # (model1より上昇)

  #' 予測値と実測値の比較
  adv_data |>
    mutate(model1 = fitted(adv_lm1),    # モデルごとに予測値をデータフレームに追加
           model2 = fitted(adv_lm2),
           model3 = fitted(adv_lm3)) |>
    pivot_longer(starts_with("model"), # モデルをラベルとして予測値をまとめる
                 names_to = "model", values_to = "fitted") |>
    ggplot(aes(x = sales, y = fitted)) + # 実測値をx軸，予測値をy軸で表示
    geom_abline(slope = 1, intercept = 0, colour = "red") + # 基準線
    geom_point(aes(colour = model, shape = model)) + # 予測値をモデル別に表示
    labs(y = "fitted values")
#+end_src
#+begin_src R :eval no :exports none
  #' 東京の気候データ

  #' モデルの比較
  tw_subset <- tw_data |> filter(month == 9) # 9月のデータの抽出
  tw_formula1 <- temp ~ solar
  tw_formula2 <- temp ~ solar + press
  tw_formula3 <- temp ~ solar + press + cloud
  tw_lm1 <- lm(tw_formula1, data=tw_subset, y = TRUE)
  tw_lm2 <- lm(tw_formula2, data=tw_subset, y = TRUE)
  tw_lm3 <- lm(tw_formula3, data=tw_subset, y = TRUE)
  summary(tw_lm1)$adj.r.squared # 自由度調整済み決定係数
  summary(tw_lm2)$adj.r.squared # (model1より上昇)
  summary(tw_lm3)$adj.r.squared # (model2より上昇)

  #' 予測値と実測値の比較
  tw_subset |>
    mutate(model1 = fitted(tw_lm1),    # モデルごとに予測値をデータフレームに追加
           model2 = fitted(tw_lm2),
           model3 = fitted(tw_lm3)) |>
    pivot_longer(starts_with("model"), # モデルをラベルとして予測値をまとめる
                 names_to = "model", values_to = "fitted") |>
    ggplot(aes(x = temp, y = fitted)) + # 気温の実測値をx軸，予測値をy軸で表示
    geom_abline(slope = 1, intercept = 0, colour = "red") + # 基準線
    geom_point(aes(colour = model, shape = model)) + # 予測値をモデル別に表示
    labs(y = "fitted values")
#+end_src
#+begin_src R :eval no :exports none
  #' ---------------------------------------------------------------------------
#+end_src
  
** COMMENT 講義資料: 決定係数
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
- [[./code/04-rsq.r][04-rsq.r]] を確認してみよう
** COMMENT 講義資料
:PROPERTIES:
:reveal_background: #EEEEFF
:END:
#+ATTR_HTML: :align left
- 以下のデータで回帰分析を行ってみよう
  - datasets::airquality
  - datasets::LifeCycleSavings


* 解析の事例
# 早稲田大学
** 実データによる例
:PROPERTIES:
:ID:       C513A101-EB45-4E7A-A4D3-1A8819EF6183
:END:
- 気象庁より取得した東京の気候データ 
  - 気象庁 https://www.data.jma.go.jp/gmd/risk/obsdl/index.php
  - データ https://noboru-murata.github.io/multivariate-analysis/data/tokyo_weather.csv

** 気温に影響を与える要因の分析
:PROPERTIES:
:ID:       A489FC6E-DE7F-40F3-AF84-149780E42205
:END:
#+begin_src R :exports none
  #' @exercise 東京の気候データを用いた例

  #' データの読み込み
  tw_subset <- read_csv("data/tokyo_weather.csv") |>
    filter(month == 9) |> # 9月のデータの抽出
    mutate(date = date(paste(year,month,day,sep="-")), .before = 1) |>
    select(-c(year,month,day,day_of_week)) |>
    set_names(c("日付","気温","降雨","日射","降雪","風向","風速","気圧","湿度","雲量"))

  #' モデル式
  tw_formula1 <- 気温 ~ 気圧
  tw_formula2 <- 気温 ~ 日射
  tw_formula3 <- 気温 ~ 気圧 + 日射
  tw_formula4 <- 気温 ~ 気圧 + 日射 + 湿度
  tw_formula5 <- 気温 ~ 気圧 + 日射 + 雲量

  #' 推定
  tw_lm1 <- lm(tw_formula1, data = tw_subset, y = TRUE)
  tw_lm2 <- lm(tw_formula2, data = tw_subset, y = TRUE)
  tw_lm3 <- lm(tw_formula3, data = tw_subset, y = TRUE)
  tw_lm4 <- lm(tw_formula4, data = tw_subset, y = TRUE)
  tw_lm5 <- lm(tw_formula5, data = tw_subset, y = TRUE)
#+end_src

#+begin_src R :exports none
  #' データの表示
  #' 記録を残すのであれば以下のようにすればよい
  #' foo <- set_names(names(tw_subset), # 列名に対応する日本語ベクトルを用意
  #'                     c("日付","気温","降雨","日射","降雪","風向","風速","気圧","湿度","雲量"))
  #' (bar <- tw_subset |> rename(all_of(foo)))
#+end_src
#+begin_src R :eval no :exports none
  tw_subset |> View() # 左上ペインに表として表示
#+end_src
#+begin_src R :exports results :results output html :tangle no
  #' データの表示(reveal用)
  tw_subset |>
    slice(1:15) |> 
    gt() |> as_raw_html()
#+end_src

#+begin_src R :exports results :results value scalar latex :tangle no
  #' データの表示(latex用)
  tw_subset |>
    mutate(日付 = as.character(日付)) |> # 文字列扱い
    gt() |> as_latex() |> as.character()
#+end_src

# org に表を処理させる場合は以下のとおり
# #+html: <font size=6>
# #+begin_src R :exports results :results output raw :tangle no
#   #' データの表示(reveal用)
#   bar |>
#     head(12) |> # 12日分を表示
#     ascii::ascii(include.rownames = FALSE) |>
#     ascii::print(type = "org")
# #+end_src
# #+html: </font>

#+reveal: split
- 気温を説明する5種類の線形回帰モデルを検討
  - モデル1 : 気温 = F(気圧)
  - モデル2 : 気温 = F(日射)
  - モデル3 : 気温 = F(気圧, 日射)
  - モデル4 : 気温 = F(気圧, 日射, 湿度)
  - モデル5 : 気温 = F(気圧, 日射, 雲量)

** 分析の視覚化
:PROPERTIES:
:ID:       E5C084E0-BB7D-4C8B-B289-C1F617CE2B13
:END:
- 関連するデータの散布図
  #+begin_src R :file figs/03_pairs.png :exports results :results graphics
    #' 関連データの散布図
    tw_subset |>
      select(気温,気圧,日射,湿度,雲量) |>
      GGally::ggpairs()
    ## tw_subset |>
    ##   select(temp,press,solar,humid,cloud) |>
    ##   GGally::ggpairs(columnLabels=c("気温","気圧","日射","湿度","雲量"))
  #+end_src

#+caption: 散布図
#+name: fig:03_pairs
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/03_pairs.png]]

#+reveal: split
- モデル1の推定結果
  #+begin_src R :file figs/03_model1.png :exports results :results graphics
    #' モデル1の推定結果
    tw_subset |>
      ggplot(aes(x = 気圧, y = 気温)) +
      geom_point(colour = "brown", shape = 20) +
      geom_smooth(method = lm, se = FALSE, colour = "blue")
  #+end_src

#+caption: モデル1
#+name: fig:03_model1
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/03_model1.png]]

#+reveal: split
- モデル2の推定結果
  #+begin_src R :file figs/03_model2.png :exports results :results graphics
    #' モデル2の推定結果
    tw_subset |>
      ggplot(aes(x = 日射, y = 気温)) +
      geom_point(colour = "brown", shape = 20) +
      geom_smooth(method = lm, se = FALSE, colour = "blue")
  #+end_src

#+caption: モデル2
#+name: fig:03_model2
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/03_model2.png]]
  
#+reveal: split
- モデル3の推定結果
  #+begin_src R :file figs/03_model3.png :exports results :results graphics
    #' モデル3の推定結果
    if(Sys.info()[["sysname"]] == "Darwin") par(family = "HiraginoSans-W4")
    s3d <- scatterplot3d::scatterplot3d( 
                            tw_subset[c("気圧","日射","気温")], # x,y,z の順
                            type = "p", # plotの種類: "p"点，"l"線，"h"足付き
                            pch = 16,   # 点の種類 (?points 参照)
                            angle = 45, # xy平面の見る方向 (適宜調整)
                            zlim = c(20,35),
                            color = "brown",
                            #' xlab="気圧", ylab="日射", zlab="気温",
                            #'    highlight.3d=TRUE # 高さ(z)ごとに色を変える
                            )
    s3d$plane3d(
          tw_lm3, col = "blue", # 回帰式の定める平面の追加
          draw_polygon = TRUE, # 平面の塗り潰しの設定
          polygon_args = list(col=rgb(0,0,1,0.1))) 
  #+end_src

#+caption: モデル3
#+name: fig:03_model3
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/03_model3.png]]

#+reveal: split
- 観測値とあてはめ値の比較
  #+begin_src R :file figs/03_models.png :exports results :results graphics
    #' 観測値とあてはめ値の比較
    tw_subset |>
      mutate(モデル1 = fitted(tw_lm1),    # モデルごとに予測値をデータフレームに追加
             モデル2 = fitted(tw_lm2),
             モデル3 = fitted(tw_lm3),
             モデル4 = fitted(tw_lm4),
             モデル5 = fitted(tw_lm5)) |>
      pivot_longer(starts_with("モデル"), # モデルをラベルとして予測値をまとめる
                   names_to = "model", values_to = "fitted") |>
      ggplot(aes(x = 気温, y = fitted)) + # 気温の実測値をx軸，予測値をy軸で表示
      geom_abline(slope = 1, intercept = 0, colour = "red") + # 基準線
      geom_point(aes(colour = model, shape = model)) + # 予測値をモデル別に表示
      labs(y = "あてはめ値") +
      xlim(22,32) + ylim(22,32) + theme(legend.position = c(.88,.15))
  #+end_src

#+caption: モデルの比較
#+name: fig:03_models
#+attr_html: height 100%
#+attr_latex: :width 0.6\linewidth
[[file:figs/03_models.png]]

** COMMENT モデルの比較
:PROPERTIES:
:ID:       6463C58D-1F34-41FE-8F44-77CE478493C0
:END:
- 決定係数(\(R^{2}\), Adjusted \(R^{2}\))
  #+html: <font size=5>
  #+begin_src R :exports results :results output html :tangle no
    #' 関数 stargazer::stargazer() を利用して結果をまとめる
    stargazer::stargazer(tw_lm1, tw_lm2, tw_lm3, tw_lm4, tw_lm5,
                         column.labels = c("モデル1","モデル2","モデル3","モデル4","モデル5"), # NULL,
                         covariate.labels = c("気圧","日射","湿度","雲量"), # NULL,
                         dep.var.caption = "目的変数", # NULL,
                         dep.var.labels = "気温", # NULL,
                         ## dep.var.labels.include = TRUE,
                         keep.stat = c("rsq","adj.rsq"), # NULL,
                         ## model.names = NULL,
                         model.numbers = FALSE, # NULL,
                         ## object.names = FALSE,
                         omit.table.layout = "n", # NULL, # "sn"
                         report = "vcs", # NULL,
                         single.row = TRUE, # FALSE,
                         title = "寄与率によるモデルの比較",
                         type = "html")
  #+end_src
  #+html: </font>

  #+begin_src R :exports results :results output latex :tangle no
    #' latex 版
    stargazer::stargazer(tw_lm1, tw_lm2, tw_lm3, tw_lm4, tw_lm5,
                         column.labels = c("モデル1","モデル2","モデル3","モデル4","モデル5"), # NULL,
                         covariate.labels = c("気圧","日射","湿度","雲量"), # NULL,
                         dep.var.caption = "目的変数", # NULL,
                         dep.var.labels = "気温", # NULL,
                         ## dep.var.labels.include = TRUE,
                         keep.stat = c("rsq","adj.rsq"), # NULL,
                         ## model.names = NULL,
                         model.numbers = FALSE, # NULL,
                         ## object.names = FALSE,
                         omit.table.layout = "n", # NULL, # "sn"
                         report = "vcs", # NULL,
                         single.row = TRUE, # FALSE,
                         title = "寄与率によるモデルの比較",
                         font.size = "small", type = "latex")
  #+end_src

  # org に表を処理させる場合は以下のとおり
  # #+begin_src R :exports none
  #   #' 関数 tibble::tribble() を利用して結果をまとめる
  #   #' 行ごとにデータを並べてデータフレームを作ることができる
  #   (baz <- tribble(
  #      ~モデル, ~決定係数, ~自由度調整済み決定係数,
  #      ## 列名は ~ で指定
  #      "気温 = F(気圧)", summary(tw_lm1)$r.squared, summary(tw_lm1)$adj.r.squared,
  #      "気温 = F(日射)", summary(tw_lm2)$r.squared, summary(tw_lm2)$adj.r.squared,
  #      "気温 = F(気圧, 日射)", summary(tw_lm3)$r.squared, summary(tw_lm3)$adj.r.squared,
  #      "気温 = F(気圧, 日射, 湿度)", summary(tw_lm4)$r.squared, summary(tw_lm4)$adj.r.squared,
  #      "気温 = F(気圧, 日射, 雲量)", summary(tw_lm5)$r.squared, summary(tw_lm5)$adj.r.squared,
  #      ))
  # #+end_src
  # #+begin_src R :eval no :exports none
  #   View(baz) # 左上ペインに表として表示
  # #+end_src
  # #+html: <font size=6>
  # #+begin_src R :exports results :results output raw :tangle no
  #   #' 比較結果の表示 (reveal用)
  #   baz |> ascii::ascii(digits=3) |> ascii::print(type = "org")
  # #+end_src
  # #+html: </font>
      
** モデルの比較
- 決定係数(\(R^{2}\), Adjusted \(R^{2}\))
  #+begin_src R :exports none
    #' 関数 gtsummary::tbl_regression() を利用して結果をまとめる
    my_gts <- function(x){
      tbl_regression(x) |>
        modify_column_hide(columns = c(p.value,conf.low)) |>
        modify_column_unhide(columns = std.error) |>
        add_glance_table(include = c("r.squared","adj.r.squared")) }
    tw_gt <- 
      tbl_merge(
        tbls = list(
          my_gts(tw_lm1),
          my_gts(tw_lm2),
          my_gts(tw_lm3),
          my_gts(tw_lm4),
          my_gts(tw_lm5)),
        tab_spanner = c("モデル1","モデル2","モデル3","モデル4","モデル5")) |>
      modify_table_body( ~ .x |>
                           arrange(factor(variable,
                                          levels = c("気圧","日射","湿度","雲量"))))
  #+end_src
  #+begin_src R :exports results :results output html :tangle no
    #' 表示(reveal用)
    tw_gt |> as_gt() |> as_raw_html()
  #+end_src

  #+begin_src R :exports results :results value scalar latex :tangle no
    #' 表示(latex用)
    tw_gt |> as_gt() |>
      tab_options(table.font.size = 12) |> as_latex() |> as.character()
  #+end_src

* 次回の予定
- 第1回 : 回帰モデルの考え方と推定
- *第2回 : モデルの評価*
- 第3回 : モデルによる予測と発展的なモデル

* Footnotes
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
